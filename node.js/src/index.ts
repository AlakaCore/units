// Package units provides a standard way of working with unit for
// Alaka and Alakans alike. It's automatically generated via a
// .yaml file with a format that makes it really easy to add new
// units. Because we use code generation, we can provide functions
// that are super fast by using explicit values without the work
// of hand copying hundreds of methods across a bunch of permutations
// of the same thing.

// File autogenerated on 2022-03-30 12:49:38.003629035 -0500 CDT m=+0.013847240.
// Do not edit directly

// Helper Types
export type scalar        = number
export type unitTitle     = string
export type unitTypeTitle = string
export type alakaTitle    = string
export type conversion    = (n: scalar) => scalar
export type matcher       = (s: string) => boolean

// Unit represents a scalar type of unit which can be converted to and from a base 
export class Unit {
	// title is used for code interfaces
	public readonly title: unitTitle
	// name is used for displays
	public readonly name: string
	// symbol is the symbol of the unit and can be displayed beside scalars
	public readonly symbol: string
	// matchList is a list of matching strings which should represent this unit in userland
	public readonly matchList: string[]
	// type returns the UnitType of this unit. You can access the BaseUnit from there
	public readonly type: UnitType
	// base returns the base Unit of this UnitType directly
	public readonly base: Unit

	// fromBase converts the given number of the unit type base to this unit
	public fromBase: conversion

	// toBase converts the given number of this unit type to the base unit
	public toBase: conversion
	
	// matches compares a string to a switch of all possible matches
	public matches: matcher

	constructor(
		title: unitTitle,
		name: string,
		symbol: string,
		matchList: string[],
		type: UnitType,
		base: Unit | null,
		fromBase: conversion,
		toBase: conversion,
		matches: matcher
	) {
		this.title = title
		this.name = name
		this.symbol = symbol
		this.matchList = matchList
		this.type = type
		if (base != null) {
			this.base = base
		} else {
			this.base = this
		}
		this.fromBase = fromBase.bind(this)
		this.toBase = toBase.bind(this)
		this.matches = matches.bind(this)
	}
}

// UnitType represents a collection of related units
export class UnitType {
	// title is used for code interfaces
	public readonly title: unitTypeTitle
	// name is used for displays
	public readonly name: string
	// base returns the primary unit of this unit type that is stored in Alaka.
	// Most of the time this is an SI unit, but not always (temperature is C,
	// not K, for example)
	// @ts-ignore
	public base: Unit
	// units returns all the supported units of this unit type
	// @ts-ignore
	public units: Unit[]
	// unitList returns all the supported units of this unit type as strings
	public readonly unitList: string[]
	// matchList is a list of matching strings which should represent this unit type in userland
	public readonly matchList: string[]

    // matches compares a string to a switch of all possible matches
	public matches: matcher

	constructor (
		title: unitTypeTitle,
		name: string,
		unitList: string[],
		matchList: string[],
		matches: matcher
	) {
		this.title = title
		this.name = name
		this.unitList = unitList
		this.matchList = matchList
		this.matches = matches.bind(this)
	}
}

const WhitespaceRegex = /\s/ig

// sanitizeString removes whitespace and lower cases the string
export function sanitizeString (input: string): string {
    const replaceValue = ''
    return input.toLowerCase().replace(WhitespaceRegex, replaceValue)
}

// toAlakaTitle returns the Alaka string representing this particular unit and unit type combo
export function toAlakaTitle (ut: UnitType, u: Unit): alakaTitle {
    return `${ut.title}_${u.title}`
}

// AllTypes is a list of all available types below
export const AllTypes: unitTypeTitle[] = [
	"Pressure",
    "Temperature",
    "Flow",
    "Volume",
    "Mass",
    "MassFlow",
    "ElectricPotential",
    "ElectricPotentialLoaded",
    "ElectricPotentialUnloaded",
    "Percentage",
    "Fillage",
    "PumpFillage",
    "Humidity",
    "Alarm",
    "Work",
    "Force",
    "Load",
    "MaxLoad",
    "MinLoad",
    "FluidLoad",
    "Length",
    "Stroke",
    "GrossStroke",
    "NetStroke",
    "StrokeRate",
    "Number",
    "Overspeed",
    "Underspeed",
    "Totaliser",
    "WMLFlowRate",
]

// AllUnits is a map of unit type -> units
export const AllUnits: { [index: unitTypeTitle]: unitTitle[] } = {
    "Pressure":                  ["Pascals","Kilopascals","Megapascals","PoundsPerSquareInch","InchesOfWater"],
    "Temperature":               ["DegreesCelsius","DegreesFahrenheit","Kelvins"],
    "Flow":                      ["CubicMetersPerSecond","CubicFeetPerSecond","ThousandCubicFeetPerDay","GallonsUSFluidPerSecond","GallonsUSFluidPerMinute","BarrelsPerSecond","BarrelsPerMinute"],
    "Volume":                    ["CubicMeters","CubicFeet","ThousandsOfCubicFeet","CubicDecimeter","Liter","GallonUSFluid","BarrelsOfOil"],
    "Mass":                      ["Kilograms","Pounds"],
    "MassFlow":                  ["KilogramsPerSecond","PoundsPerSecond","PoundsPerMinute"],
    "ElectricPotential":         ["Volts"],
    "ElectricPotentialLoaded":   ["Volts"],
    "ElectricPotentialUnloaded": ["Volts"],
    "Percentage":                ["Percent"],
    "Fillage":                   ["Percent"],
    "PumpFillage":               ["Percent"],
    "Humidity":                  ["Percent"],
    "Alarm":                     ["Percent"],
    "Work":                      ["Joules","InchPoundsForce","CubicFeetOfNaturalGas","BarrelsOfOilEquivalent"],
    "Force":                     ["Newtons","PoundsForce","KilogramsForce"],
    "Load":                      ["Newtons","PoundsForce","KilogramsForce"],
    "MaxLoad":                   ["Newtons","PoundsForce","KilogramsForce"],
    "MinLoad":                   ["Newtons","PoundsForce","KilogramsForce"],
    "FluidLoad":                 ["Newtons","PoundsForce","KilogramsForce"],
    "Length":                    ["Meters","Feet","Inches"],
    "Stroke":                    ["Meters","Feet","Inches"],
    "GrossStroke":               ["Meters","Feet","Inches"],
    "NetStroke":                 ["Meters","Feet","Inches"],
    "StrokeRate":                ["StrokesPerSecond"],
    "Number":                    ["Number"],
    "Overspeed":                 ["Number"],
    "Underspeed":                ["Number"],
    "Totaliser":                 ["Number"],
    "WMLFlowRate":               ["Number"],
}

// AllUnitTypes is a list of all available Unit and Type combos below
// AKA the list of all possible output combinations of alakaTitle
export const AllUnitTypes: alakaTitle[] = [
	"Pressure_Pascals",
    "Pressure_Kilopascals",
    "Pressure_Megapascals",
    "Pressure_PoundsPerSquareInch",
    "Pressure_InchesOfWater",
    "Temperature_DegreesCelsius",
    "Temperature_DegreesFahrenheit",
    "Temperature_Kelvins",
    "Flow_CubicMetersPerSecond",
    "Flow_CubicFeetPerSecond",
    "Flow_ThousandCubicFeetPerDay",
    "Flow_GallonsUSFluidPerSecond",
    "Flow_GallonsUSFluidPerMinute",
    "Flow_BarrelsPerSecond",
    "Flow_BarrelsPerMinute",
    "Volume_CubicMeters",
    "Volume_CubicFeet",
    "Volume_ThousandsOfCubicFeet",
    "Volume_CubicDecimeter",
    "Volume_Liter",
    "Volume_GallonUSFluid",
    "Volume_BarrelsOfOil",
    "Mass_Kilograms",
    "Mass_Pounds",
    "MassFlow_KilogramsPerSecond",
    "MassFlow_PoundsPerSecond",
    "MassFlow_PoundsPerMinute",
    "ElectricPotential_Volts",
    "ElectricPotentialLoaded_Volts",
    "ElectricPotentialUnloaded_Volts",
    "Percentage_Percent",
    "Fillage_Percent",
    "PumpFillage_Percent",
    "Humidity_Percent",
    "Alarm_Percent",
    "Work_Joules",
    "Work_InchPoundsForce",
    "Work_CubicFeetOfNaturalGas",
    "Work_BarrelsOfOilEquivalent",
    "Force_Newtons",
    "Force_PoundsForce",
    "Force_KilogramsForce",
    "Load_Newtons",
    "Load_PoundsForce",
    "Load_KilogramsForce",
    "MaxLoad_Newtons",
    "MaxLoad_PoundsForce",
    "MaxLoad_KilogramsForce",
    "MinLoad_Newtons",
    "MinLoad_PoundsForce",
    "MinLoad_KilogramsForce",
    "FluidLoad_Newtons",
    "FluidLoad_PoundsForce",
    "FluidLoad_KilogramsForce",
    "Length_Meters",
    "Length_Feet",
    "Length_Inches",
    "Stroke_Meters",
    "Stroke_Feet",
    "Stroke_Inches",
    "GrossStroke_Meters",
    "GrossStroke_Feet",
    "GrossStroke_Inches",
    "NetStroke_Meters",
    "NetStroke_Feet",
    "NetStroke_Inches",
    "StrokeRate_StrokesPerSecond",
    "Number_Number",
    "Overspeed_Number",
    "Underspeed_Number",
    "Totaliser_Number",
    "WMLFlowRate_Number",
]

// getType returns the unit type which matches input or NumberUnitType
export function getType (input: string): UnitType {
    switch (sanitizeString(input)) {
    case "pressure":
    	return PressureUnitType
    case "temperature":
    	return TemperatureUnitType
    case "temp":
    	return TemperatureUnitType
    case "flow":
    	return FlowUnitType
    case "flowrate":
    	return FlowUnitType
    case "flow_rate":
    	return FlowUnitType
    case "gasflow":
    	return FlowUnitType
    case "gasflowrate":
    	return FlowUnitType
    case "gas_flow":
    	return FlowUnitType
    case "gas_flow_rate":
    	return FlowUnitType
    case "volume":
    	return VolumeUnitType
    case "mass":
    	return MassUnitType
    case "massflow":
    	return MassFlowUnitType
    case "massflowrate":
    	return MassFlowUnitType
    case "flow(mass)":
    	return MassFlowUnitType
    case "flowrate(mass)":
    	return MassFlowUnitType
    case "electricpotential":
    	return ElectricPotentialUnitType
    case "voltage":
    	return ElectricPotentialUnitType
    case "electricpotentialloaded":
    	return ElectricPotentialLoadedUnitType
    case "voltageloaded":
    	return ElectricPotentialLoadedUnitType
    case "electricpotentialunloaded":
    	return ElectricPotentialUnloadedUnitType
    case "voltageunloaded":
    	return ElectricPotentialUnloadedUnitType
    case "percentage":
    	return PercentageUnitType
    case "fillage":
    	return FillageUnitType
    case "pumpfillage":
    	return PumpFillageUnitType
    case "humidity":
    	return HumidityUnitType
    case "alarm":
    	return AlarmUnitType
    case "work":
    	return WorkUnitType
    case "force":
    	return ForceUnitType
    case "load":
    	return LoadUnitType
    case "maxload":
    	return MaxLoadUnitType
    case "minload":
    	return MinLoadUnitType
    case "fluidload":
    	return FluidLoadUnitType
    case "l":
    	return LengthUnitType
    case "length":
    	return LengthUnitType
    case "stroke":
    	return StrokeUnitType
    case "grossstroke":
    	return GrossStrokeUnitType
    case "netstroke":
    	return NetStrokeUnitType
    case "strokerate":
    	return StrokeRateUnitType
    case "stroke-rate":
    	return StrokeRateUnitType
    case "*":
    	return NumberUnitType
    case "overspeed":
    	return OverspeedUnitType
    case "underspeed":
    	return UnderspeedUnitType
    case "totaliser":
    	return TotaliserUnitType
    case "wmlflowrate":
    	return WMLFlowRateUnitType
    default:
    	return NumberUnitType
    }
}

// getUnit returns the unit which matches input or NumberNumberUnit
export function getUnit (input: string, typeOf: UnitType): Unit {
    const search = typeOf.title + "->" + sanitizeString(input)
    	switch (search) {
    case "Pressure->pa":
    	return PascalsPressureUnit
    case "Pressure->pascal":
    	return PascalsPressureUnit
    case "Pressure->pascals":
    	return PascalsPressureUnit
    case "Pressure->kpa":
    	return KilopascalsPressureUnit
    case "Pressure->kilopascal":
    	return KilopascalsPressureUnit
    case "Pressure->kilopascals":
    	return KilopascalsPressureUnit
    case "Pressure->mpa":
    	return MegapascalsPressureUnit
    case "Pressure->megapascal":
    	return MegapascalsPressureUnit
    case "Pressure->megapascals":
    	return MegapascalsPressureUnit
    case "Pressure->psi":
    	return PoundsPerSquareInchPressureUnit
    case "Pressure->poundspersquareinch":
    	return PoundsPerSquareInchPressureUnit
    case "Pressure->poundpersquareinch":
    	return PoundsPerSquareInchPressureUnit
    case "Pressure->inh₂o":
    	return InchesOfWaterPressureUnit
    case "Pressure->inh₂0":
    	return InchesOfWaterPressureUnit
    case "Pressure->inh2o":
    	return InchesOfWaterPressureUnit
    case "Pressure->inh20":
    	return InchesOfWaterPressureUnit
    case "Pressure->incheswater":
    	return InchesOfWaterPressureUnit
    case "Pressure->inchesofwater":
    	return InchesOfWaterPressureUnit
    case "Pressure->inchwater":
    	return InchesOfWaterPressureUnit
    case "Pressure->inchofwater":
    	return InchesOfWaterPressureUnit
    case "Temperature->c":
    	return DegreesCelsiusTemperatureUnit
    case "Temperature->°c":
    	return DegreesCelsiusTemperatureUnit
    case "Temperature->celsius":
    	return DegreesCelsiusTemperatureUnit
    case "Temperature->degreesc":
    	return DegreesCelsiusTemperatureUnit
    case "Temperature->degreec":
    	return DegreesCelsiusTemperatureUnit
    case "Temperature->degreescelsius":
    	return DegreesCelsiusTemperatureUnit
    case "Temperature->degreecelsius":
    	return DegreesCelsiusTemperatureUnit
    case "Temperature->f":
    	return DegreesFahrenheitTemperatureUnit
    case "Temperature->°f":
    	return DegreesFahrenheitTemperatureUnit
    case "Temperature->fahrenheit":
    	return DegreesFahrenheitTemperatureUnit
    case "Temperature->degreesf":
    	return DegreesFahrenheitTemperatureUnit
    case "Temperature->degreef":
    	return DegreesFahrenheitTemperatureUnit
    case "Temperature->degreesfahrenheit":
    	return DegreesFahrenheitTemperatureUnit
    case "Temperature->degreefahrenheit":
    	return DegreesFahrenheitTemperatureUnit
    case "Temperature->k":
    	return KelvinsTemperatureUnit
    case "Temperature->°k":
    	return KelvinsTemperatureUnit
    case "Temperature->kelvin":
    	return KelvinsTemperatureUnit
    case "Temperature->kelvins":
    	return KelvinsTemperatureUnit
    case "Temperature->degreesk":
    	return KelvinsTemperatureUnit
    case "Temperature->degreek":
    	return KelvinsTemperatureUnit
    case "Temperature->degreeskelvin":
    	return KelvinsTemperatureUnit
    case "Temperature->degreekelvin":
    	return KelvinsTemperatureUnit
    case "Flow->m³/s":
    	return CubicMetersPerSecondFlowUnit
    case "Flow->m³s":
    	return CubicMetersPerSecondFlowUnit
    case "Flow->m3/s":
    	return CubicMetersPerSecondFlowUnit
    case "Flow->m3s":
    	return CubicMetersPerSecondFlowUnit
    case "Flow->m^3/s":
    	return CubicMetersPerSecondFlowUnit
    case "Flow->m^3s":
    	return CubicMetersPerSecondFlowUnit
    case "Flow->cubicmeterspersecond":
    	return CubicMetersPerSecondFlowUnit
    case "Flow->cubicmeterpersecond":
    	return CubicMetersPerSecondFlowUnit
    case "Flow->cubicmeters/second":
    	return CubicMetersPerSecondFlowUnit
    case "Flow->cubicmeter/second":
    	return CubicMetersPerSecondFlowUnit
    case "Flow->ft³/s":
    	return CubicFeetPerSecondFlowUnit
    case "Flow->ft³s":
    	return CubicFeetPerSecondFlowUnit
    case "Flow->ft3/s":
    	return CubicFeetPerSecondFlowUnit
    case "Flow->ft3s":
    	return CubicFeetPerSecondFlowUnit
    case "Flow->ft^3/s":
    	return CubicFeetPerSecondFlowUnit
    case "Flow->ft^3s":
    	return CubicFeetPerSecondFlowUnit
    case "Flow->f³/s":
    	return CubicFeetPerSecondFlowUnit
    case "Flow->f³s":
    	return CubicFeetPerSecondFlowUnit
    case "Flow->f3/s":
    	return CubicFeetPerSecondFlowUnit
    case "Flow->f3s":
    	return CubicFeetPerSecondFlowUnit
    case "Flow->f^3/s":
    	return CubicFeetPerSecondFlowUnit
    case "Flow->f^3s":
    	return CubicFeetPerSecondFlowUnit
    case "Flow->cubicfeetpersecond":
    	return CubicFeetPerSecondFlowUnit
    case "Flow->cubicfootpersecond":
    	return CubicFeetPerSecondFlowUnit
    case "Flow->cubicfeet/second":
    	return CubicFeetPerSecondFlowUnit
    case "Flow->cubicfoot/second":
    	return CubicFeetPerSecondFlowUnit
    case "Flow->mcfd":
    	return ThousandCubicFeetPerDayFlowUnit
    case "Flow->mcf/d":
    	return ThousandCubicFeetPerDayFlowUnit
    case "Flow->mcftd":
    	return ThousandCubicFeetPerDayFlowUnit
    case "Flow->mcft/d":
    	return ThousandCubicFeetPerDayFlowUnit
    case "Flow->mft³/d":
    	return ThousandCubicFeetPerDayFlowUnit
    case "Flow->mft³d":
    	return ThousandCubicFeetPerDayFlowUnit
    case "Flow->mft3/d":
    	return ThousandCubicFeetPerDayFlowUnit
    case "Flow->mft3d":
    	return ThousandCubicFeetPerDayFlowUnit
    case "Flow->mft^3/d":
    	return ThousandCubicFeetPerDayFlowUnit
    case "Flow->mft^3d":
    	return ThousandCubicFeetPerDayFlowUnit
    case "Flow->mf³/d":
    	return ThousandCubicFeetPerDayFlowUnit
    case "Flow->mf³d":
    	return ThousandCubicFeetPerDayFlowUnit
    case "Flow->mf3/d":
    	return ThousandCubicFeetPerDayFlowUnit
    case "Flow->mf3d":
    	return ThousandCubicFeetPerDayFlowUnit
    case "Flow->mf^3/d":
    	return ThousandCubicFeetPerDayFlowUnit
    case "Flow->mf^3d":
    	return ThousandCubicFeetPerDayFlowUnit
    case "Flow->thousandcubicfeetperday":
    	return ThousandCubicFeetPerDayFlowUnit
    case "Flow->thousandcubicfeet/day":
    	return ThousandCubicFeetPerDayFlowUnit
    case "Flow->gal/s":
    	return GallonsUSFluidPerSecondFlowUnit
    case "Flow->gals/s":
    	return GallonsUSFluidPerSecondFlowUnit
    case "Flow->gals":
    	return GallonsUSFluidPerSecondFlowUnit
    case "Flow->galss":
    	return GallonsUSFluidPerSecondFlowUnit
    case "Flow->gps":
    	return GallonsUSFluidPerSecondFlowUnit
    case "Flow->gallonspersecond":
    	return GallonsUSFluidPerSecondFlowUnit
    case "Flow->gallonpersecond":
    	return GallonsUSFluidPerSecondFlowUnit
    case "Flow->gallons/second":
    	return GallonsUSFluidPerSecondFlowUnit
    case "Flow->gallon/second":
    	return GallonsUSFluidPerSecondFlowUnit
    case "Flow->gal/m":
    	return GallonsUSFluidPerMinuteFlowUnit
    case "Flow->gals/m":
    	return GallonsUSFluidPerMinuteFlowUnit
    case "Flow->galm":
    	return GallonsUSFluidPerMinuteFlowUnit
    case "Flow->galsm":
    	return GallonsUSFluidPerMinuteFlowUnit
    case "Flow->gpm":
    	return GallonsUSFluidPerMinuteFlowUnit
    case "Flow->gallonsperminute":
    	return GallonsUSFluidPerMinuteFlowUnit
    case "Flow->gallonperminute":
    	return GallonsUSFluidPerMinuteFlowUnit
    case "Flow->gallonspermin":
    	return GallonsUSFluidPerMinuteFlowUnit
    case "Flow->gallonpermin":
    	return GallonsUSFluidPerMinuteFlowUnit
    case "Flow->gallons/minute":
    	return GallonsUSFluidPerMinuteFlowUnit
    case "Flow->gallons/min":
    	return GallonsUSFluidPerMinuteFlowUnit
    case "Flow->gallon/minute":
    	return GallonsUSFluidPerMinuteFlowUnit
    case "Flow->gallon/min":
    	return GallonsUSFluidPerMinuteFlowUnit
    case "Flow->bbl/s":
    	return BarrelsPerSecondFlowUnit
    case "Flow->bbl/second":
    	return BarrelsPerSecondFlowUnit
    case "Flow->bbls":
    	return BarrelsPerSecondFlowUnit
    case "Flow->barrelpersecond":
    	return BarrelsPerSecondFlowUnit
    case "Flow->barrelspersecond":
    	return BarrelsPerSecondFlowUnit
    case "Flow->barrels/second":
    	return BarrelsPerSecondFlowUnit
    case "Flow->barrel/second":
    	return BarrelsPerSecondFlowUnit
    case "Flow->bbl/min":
    	return BarrelsPerMinuteFlowUnit
    case "Flow->bbl/minute":
    	return BarrelsPerMinuteFlowUnit
    case "Flow->bbl/m":
    	return BarrelsPerMinuteFlowUnit
    case "Flow->bblm":
    	return BarrelsPerMinuteFlowUnit
    case "Flow->barrelspermin":
    	return BarrelsPerMinuteFlowUnit
    case "Flow->barrelsperminute":
    	return BarrelsPerMinuteFlowUnit
    case "Flow->barrelpermin":
    	return BarrelsPerMinuteFlowUnit
    case "Flow->barrelperminute":
    	return BarrelsPerMinuteFlowUnit
    case "Flow->barrels/min":
    	return BarrelsPerMinuteFlowUnit
    case "Flow->barrels/minute":
    	return BarrelsPerMinuteFlowUnit
    case "Flow->barrel/min":
    	return BarrelsPerMinuteFlowUnit
    case "Flow->barrel/minute":
    	return BarrelsPerMinuteFlowUnit
    case "Volume->m³":
    	return CubicMetersVolumeUnit
    case "Volume->m3":
    	return CubicMetersVolumeUnit
    case "Volume->cubicmeter":
    	return CubicMetersVolumeUnit
    case "Volume->cubicmeters":
    	return CubicMetersVolumeUnit
    case "Volume->cuft":
    	return CubicFeetVolumeUnit
    case "Volume->ft³":
    	return CubicFeetVolumeUnit
    case "Volume->f³":
    	return CubicFeetVolumeUnit
    case "Volume->cubicfoot":
    	return CubicFeetVolumeUnit
    case "Volume->cubicfeet":
    	return CubicFeetVolumeUnit
    case "Volume->mcf":
    	return ThousandsOfCubicFeetVolumeUnit
    case "Volume->mft³":
    	return ThousandsOfCubicFeetVolumeUnit
    case "Volume->mf³":
    	return ThousandsOfCubicFeetVolumeUnit
    case "Volume->thousandcubicfeet":
    	return ThousandsOfCubicFeetVolumeUnit
    case "Volume->thousandsofcubicfeet":
    	return ThousandsOfCubicFeetVolumeUnit
    case "Volume->thousandscubicfeet":
    	return ThousandsOfCubicFeetVolumeUnit
    case "Volume->dm³":
    	return CubicDecimeterVolumeUnit
    case "Volume->dm3":
    	return CubicDecimeterVolumeUnit
    case "Volume->cubicdecimeter":
    	return CubicDecimeterVolumeUnit
    case "Volume->cubicdecimeters":
    	return CubicDecimeterVolumeUnit
    case "Volume->l":
    	return LiterVolumeUnit
    case "Volume->liter":
    	return LiterVolumeUnit
    case "Volume->liters":
    	return LiterVolumeUnit
    case "Volume->litre":
    	return LiterVolumeUnit
    case "Volume->litres":
    	return LiterVolumeUnit
    case "Volume->gal":
    	return GallonUSFluidVolumeUnit
    case "Volume->gallon":
    	return GallonUSFluidVolumeUnit
    case "Volume->gals":
    	return GallonUSFluidVolumeUnit
    case "Volume->gallons":
    	return GallonUSFluidVolumeUnit
    case "Volume->gal(us)":
    	return GallonUSFluidVolumeUnit
    case "Volume->gallon(us)":
    	return GallonUSFluidVolumeUnit
    case "Volume->gals(us)":
    	return GallonUSFluidVolumeUnit
    case "Volume->gallons(us)":
    	return GallonUSFluidVolumeUnit
    case "Volume->gal(u.s.)":
    	return GallonUSFluidVolumeUnit
    case "Volume->gallon(u.s.)":
    	return GallonUSFluidVolumeUnit
    case "Volume->gals(u.s.)":
    	return GallonUSFluidVolumeUnit
    case "Volume->gallons(u.s.)":
    	return GallonUSFluidVolumeUnit
    case "Volume->gal(usfluid)":
    	return GallonUSFluidVolumeUnit
    case "Volume->gallon(usfluid)":
    	return GallonUSFluidVolumeUnit
    case "Volume->gals(usfluid)":
    	return GallonUSFluidVolumeUnit
    case "Volume->gallons(usfluid)":
    	return GallonUSFluidVolumeUnit
    case "Volume->gal(u.s.fluid)":
    	return GallonUSFluidVolumeUnit
    case "Volume->gallon(u.s.fluid)":
    	return GallonUSFluidVolumeUnit
    case "Volume->gals(u.s.fluid)":
    	return GallonUSFluidVolumeUnit
    case "Volume->gallons(u.s.fluid)":
    	return GallonUSFluidVolumeUnit
    case "Volume->bbl":
    	return BarrelsOfOilVolumeUnit
    case "Volume->bbls":
    	return BarrelsOfOilVolumeUnit
    case "Volume->barrelsofoil":
    	return BarrelsOfOilVolumeUnit
    case "Volume->barrelofoil":
    	return BarrelsOfOilVolumeUnit
    case "Mass->kg":
    	return KilogramsMassUnit
    case "Mass->kilogram":
    	return KilogramsMassUnit
    case "Mass->kilo":
    	return KilogramsMassUnit
    case "Mass->kgs":
    	return KilogramsMassUnit
    case "Mass->kilograms":
    	return KilogramsMassUnit
    case "Mass->kilos":
    	return KilogramsMassUnit
    case "Mass->lb":
    	return PoundsMassUnit
    case "Mass->lbs":
    	return PoundsMassUnit
    case "Mass->pound":
    	return PoundsMassUnit
    case "Mass->pounds":
    	return PoundsMassUnit
    case "MassFlow->kg/s":
    	return KilogramsPerSecondMassFlowUnit
    case "MassFlow->kgs":
    	return KilogramsPerSecondMassFlowUnit
    case "MassFlow->kilogrampersecond":
    	return KilogramsPerSecondMassFlowUnit
    case "MassFlow->kilopersecond":
    	return KilogramsPerSecondMassFlowUnit
    case "MassFlow->kgpersecond":
    	return KilogramsPerSecondMassFlowUnit
    case "MassFlow->kilogramspersecond":
    	return KilogramsPerSecondMassFlowUnit
    case "MassFlow->kilospersecond":
    	return KilogramsPerSecondMassFlowUnit
    case "MassFlow->kgspersecond":
    	return KilogramsPerSecondMassFlowUnit
    case "MassFlow->kilogram/second":
    	return KilogramsPerSecondMassFlowUnit
    case "MassFlow->kilo/second":
    	return KilogramsPerSecondMassFlowUnit
    case "MassFlow->kg/second":
    	return KilogramsPerSecondMassFlowUnit
    case "MassFlow->kilograms/second":
    	return KilogramsPerSecondMassFlowUnit
    case "MassFlow->kilos/second":
    	return KilogramsPerSecondMassFlowUnit
    case "MassFlow->kgs/second":
    	return KilogramsPerSecondMassFlowUnit
    case "MassFlow->lb/s":
    	return PoundsPerSecondMassFlowUnit
    case "MassFlow->lbs/s":
    	return PoundsPerSecondMassFlowUnit
    case "MassFlow->lbs":
    	return PoundsPerSecondMassFlowUnit
    case "MassFlow->lbss":
    	return PoundsPerSecondMassFlowUnit
    case "MassFlow->poundpersecond":
    	return PoundsPerSecondMassFlowUnit
    case "MassFlow->poundspersecond":
    	return PoundsPerSecondMassFlowUnit
    case "MassFlow->pound/second":
    	return PoundsPerSecondMassFlowUnit
    case "MassFlow->pounds/second":
    	return PoundsPerSecondMassFlowUnit
    case "MassFlow->lb/min":
    	return PoundsPerMinuteMassFlowUnit
    case "MassFlow->lbs/min":
    	return PoundsPerMinuteMassFlowUnit
    case "MassFlow->lbmin":
    	return PoundsPerMinuteMassFlowUnit
    case "MassFlow->lbsmin":
    	return PoundsPerMinuteMassFlowUnit
    case "MassFlow->lb/m":
    	return PoundsPerMinuteMassFlowUnit
    case "MassFlow->lbs/m":
    	return PoundsPerMinuteMassFlowUnit
    case "MassFlow->lbm":
    	return PoundsPerMinuteMassFlowUnit
    case "MassFlow->lbsm":
    	return PoundsPerMinuteMassFlowUnit
    case "MassFlow->poundperminute":
    	return PoundsPerMinuteMassFlowUnit
    case "MassFlow->poundsperminute":
    	return PoundsPerMinuteMassFlowUnit
    case "MassFlow->pound/minute":
    	return PoundsPerMinuteMassFlowUnit
    case "MassFlow->pounds/minute":
    	return PoundsPerMinuteMassFlowUnit
    case "MassFlow->poundpermin":
    	return PoundsPerMinuteMassFlowUnit
    case "MassFlow->poundspermin":
    	return PoundsPerMinuteMassFlowUnit
    case "MassFlow->pound/min":
    	return PoundsPerMinuteMassFlowUnit
    case "MassFlow->pounds/min":
    	return PoundsPerMinuteMassFlowUnit
    case "ElectricPotential->volt":
    	return VoltsElectricPotentialUnit
    case "ElectricPotential->volts":
    	return VoltsElectricPotentialUnit
    case "ElectricPotential->v":
    	return VoltsElectricPotentialUnit
    case "ElectricPotentialLoaded->volt":
    	return VoltsElectricPotentialLoadedUnit
    case "ElectricPotentialLoaded->volts":
    	return VoltsElectricPotentialLoadedUnit
    case "ElectricPotentialLoaded->v":
    	return VoltsElectricPotentialLoadedUnit
    case "ElectricPotentialUnloaded->volt":
    	return VoltsElectricPotentialUnloadedUnit
    case "ElectricPotentialUnloaded->volts":
    	return VoltsElectricPotentialUnloadedUnit
    case "ElectricPotentialUnloaded->v":
    	return VoltsElectricPotentialUnloadedUnit
    case "Percentage->%":
    	return PercentPercentageUnit
    case "Percentage->percent":
    	return PercentPercentageUnit
    case "Percentage->percentage":
    	return PercentPercentageUnit
    case "Fillage->%":
    	return PercentFillageUnit
    case "Fillage->percent":
    	return PercentFillageUnit
    case "Fillage->percentage":
    	return PercentFillageUnit
    case "PumpFillage->%":
    	return PercentPumpFillageUnit
    case "PumpFillage->percent":
    	return PercentPumpFillageUnit
    case "PumpFillage->percentage":
    	return PercentPumpFillageUnit
    case "Humidity->%":
    	return PercentHumidityUnit
    case "Humidity->percent":
    	return PercentHumidityUnit
    case "Humidity->percentage":
    	return PercentHumidityUnit
    case "Alarm->%":
    	return PercentAlarmUnit
    case "Alarm->percent":
    	return PercentAlarmUnit
    case "Alarm->percentage":
    	return PercentAlarmUnit
    case "Work->j":
    	return JoulesWorkUnit
    case "Work->joule":
    	return JoulesWorkUnit
    case "Work->joules":
    	return JoulesWorkUnit
    case "Work->inlbf":
    	return InchPoundsForceWorkUnit
    case "Work->inch-poundsforce":
    	return InchPoundsForceWorkUnit
    case "Work->inch-poundforce":
    	return InchPoundsForceWorkUnit
    case "Work->in-lbf":
    	return InchPoundsForceWorkUnit
    case "Work->btuᵢₜ":
    	return CubicFeetOfNaturalGasWorkUnit
    case "Work->btuit":
    	return CubicFeetOfNaturalGasWorkUnit
    case "Work->btu":
    	return CubicFeetOfNaturalGasWorkUnit
    case "Work->cubicfeetofnaturalgas":
    	return CubicFeetOfNaturalGasWorkUnit
    case "Work->bboe":
    	return BarrelsOfOilEquivalentWorkUnit
    case "Work->barrelsofoilequivalent":
    	return BarrelsOfOilEquivalentWorkUnit
    case "Force->n":
    	return NewtonsForceUnit
    case "Force->newton":
    	return NewtonsForceUnit
    case "Force->newtons":
    	return NewtonsForceUnit
    case "Force->lbf":
    	return PoundsForceForceUnit
    case "Force->pounds-force":
    	return PoundsForceForceUnit
    case "Force->poundsforce":
    	return PoundsForceForceUnit
    case "Force->pound-force":
    	return PoundsForceForceUnit
    case "Force->poundforce":
    	return PoundsForceForceUnit
    case "Force->kgf":
    	return KilogramsForceForceUnit
    case "Force->kilograms-force":
    	return KilogramsForceForceUnit
    case "Force->kilogram-force":
    	return KilogramsForceForceUnit
    case "Load->n":
    	return NewtonsLoadUnit
    case "Load->newton":
    	return NewtonsLoadUnit
    case "Load->newtons":
    	return NewtonsLoadUnit
    case "Load->lbf":
    	return PoundsForceLoadUnit
    case "Load->pounds-force":
    	return PoundsForceLoadUnit
    case "Load->poundsforce":
    	return PoundsForceLoadUnit
    case "Load->pound-force":
    	return PoundsForceLoadUnit
    case "Load->poundforce":
    	return PoundsForceLoadUnit
    case "Load->kgf":
    	return KilogramsForceLoadUnit
    case "Load->kilograms-force":
    	return KilogramsForceLoadUnit
    case "Load->kilogram-force":
    	return KilogramsForceLoadUnit
    case "MaxLoad->n":
    	return NewtonsMaxLoadUnit
    case "MaxLoad->newton":
    	return NewtonsMaxLoadUnit
    case "MaxLoad->newtons":
    	return NewtonsMaxLoadUnit
    case "MaxLoad->lbf":
    	return PoundsForceMaxLoadUnit
    case "MaxLoad->pounds-force":
    	return PoundsForceMaxLoadUnit
    case "MaxLoad->poundsforce":
    	return PoundsForceMaxLoadUnit
    case "MaxLoad->pound-force":
    	return PoundsForceMaxLoadUnit
    case "MaxLoad->poundforce":
    	return PoundsForceMaxLoadUnit
    case "MaxLoad->kgf":
    	return KilogramsForceMaxLoadUnit
    case "MaxLoad->kilograms-force":
    	return KilogramsForceMaxLoadUnit
    case "MaxLoad->kilogram-force":
    	return KilogramsForceMaxLoadUnit
    case "MinLoad->n":
    	return NewtonsMinLoadUnit
    case "MinLoad->newton":
    	return NewtonsMinLoadUnit
    case "MinLoad->newtons":
    	return NewtonsMinLoadUnit
    case "MinLoad->lbf":
    	return PoundsForceMinLoadUnit
    case "MinLoad->pounds-force":
    	return PoundsForceMinLoadUnit
    case "MinLoad->poundsforce":
    	return PoundsForceMinLoadUnit
    case "MinLoad->pound-force":
    	return PoundsForceMinLoadUnit
    case "MinLoad->poundforce":
    	return PoundsForceMinLoadUnit
    case "MinLoad->kgf":
    	return KilogramsForceMinLoadUnit
    case "MinLoad->kilograms-force":
    	return KilogramsForceMinLoadUnit
    case "MinLoad->kilogram-force":
    	return KilogramsForceMinLoadUnit
    case "FluidLoad->n":
    	return NewtonsFluidLoadUnit
    case "FluidLoad->newton":
    	return NewtonsFluidLoadUnit
    case "FluidLoad->newtons":
    	return NewtonsFluidLoadUnit
    case "FluidLoad->lbf":
    	return PoundsForceFluidLoadUnit
    case "FluidLoad->pounds-force":
    	return PoundsForceFluidLoadUnit
    case "FluidLoad->poundsforce":
    	return PoundsForceFluidLoadUnit
    case "FluidLoad->pound-force":
    	return PoundsForceFluidLoadUnit
    case "FluidLoad->poundforce":
    	return PoundsForceFluidLoadUnit
    case "FluidLoad->kgf":
    	return KilogramsForceFluidLoadUnit
    case "FluidLoad->kilograms-force":
    	return KilogramsForceFluidLoadUnit
    case "FluidLoad->kilogram-force":
    	return KilogramsForceFluidLoadUnit
    case "Length->m":
    	return MetersLengthUnit
    case "Length->meter":
    	return MetersLengthUnit
    case "Length->meters":
    	return MetersLengthUnit
    case "Length->ft":
    	return FeetLengthUnit
    case "Length->foot":
    	return FeetLengthUnit
    case "Length->feet":
    	return FeetLengthUnit
    case "Length->in":
    	return InchesLengthUnit
    case "Length->inch":
    	return InchesLengthUnit
    case "Length->inches":
    	return InchesLengthUnit
    case "Stroke->m":
    	return MetersStrokeUnit
    case "Stroke->meter":
    	return MetersStrokeUnit
    case "Stroke->meters":
    	return MetersStrokeUnit
    case "Stroke->ft":
    	return FeetStrokeUnit
    case "Stroke->foot":
    	return FeetStrokeUnit
    case "Stroke->feet":
    	return FeetStrokeUnit
    case "Stroke->in":
    	return InchesStrokeUnit
    case "Stroke->inch":
    	return InchesStrokeUnit
    case "Stroke->inches":
    	return InchesStrokeUnit
    case "GrossStroke->m":
    	return MetersGrossStrokeUnit
    case "GrossStroke->meter":
    	return MetersGrossStrokeUnit
    case "GrossStroke->meters":
    	return MetersGrossStrokeUnit
    case "GrossStroke->ft":
    	return FeetGrossStrokeUnit
    case "GrossStroke->foot":
    	return FeetGrossStrokeUnit
    case "GrossStroke->feet":
    	return FeetGrossStrokeUnit
    case "GrossStroke->in":
    	return InchesGrossStrokeUnit
    case "GrossStroke->inch":
    	return InchesGrossStrokeUnit
    case "GrossStroke->inches":
    	return InchesGrossStrokeUnit
    case "NetStroke->m":
    	return MetersNetStrokeUnit
    case "NetStroke->meter":
    	return MetersNetStrokeUnit
    case "NetStroke->meters":
    	return MetersNetStrokeUnit
    case "NetStroke->ft":
    	return FeetNetStrokeUnit
    case "NetStroke->foot":
    	return FeetNetStrokeUnit
    case "NetStroke->feet":
    	return FeetNetStrokeUnit
    case "NetStroke->in":
    	return InchesNetStrokeUnit
    case "NetStroke->inch":
    	return InchesNetStrokeUnit
    case "NetStroke->inches":
    	return InchesNetStrokeUnit
    case "StrokeRate->strokes/s":
    	return StrokesPerSecondStrokeRateUnit
    case "StrokeRate->strokespersecond":
    	return StrokesPerSecondStrokeRateUnit
    case "StrokeRate->s/s":
    	return StrokesPerSecondStrokeRateUnit
    case "Number->number":
    	return NumberNumberUnit
    case "Number->*":
    	return NumberNumberUnit
    case "Overspeed->number":
    	return NumberOverspeedUnit
    case "Overspeed->*":
    	return NumberOverspeedUnit
    case "Underspeed->number":
    	return NumberUnderspeedUnit
    case "Underspeed->*":
    	return NumberUnderspeedUnit
    case "Totaliser->number":
    	return NumberTotaliserUnit
    case "Totaliser->*":
    	return NumberTotaliserUnit
    case "WMLFlowRate->number":
    	return NumberWMLFlowRateUnit
    case "WMLFlowRate->*":
    	return NumberWMLFlowRateUnit
    default:
    	return NumberNumberUnit
    }
}

// getTypeUnit returns the unit type and unit which matches input or (NumberUnitType, NumberNumberUnit).
// Opposite of AlakaTitle
export function getTypeUnit (input: alakaTitle): [UnitType, Unit] {
    switch (input) {
    case "Pressure_Pascals":
    	return [PressureUnitType, PascalsPressureUnit]
    case "Pressure_Kilopascals":
    	return [PressureUnitType, KilopascalsPressureUnit]
    case "Pressure_Megapascals":
    	return [PressureUnitType, MegapascalsPressureUnit]
    case "Pressure_PoundsPerSquareInch":
    	return [PressureUnitType, PoundsPerSquareInchPressureUnit]
    case "Pressure_InchesOfWater":
    	return [PressureUnitType, InchesOfWaterPressureUnit]
    case "Temperature_DegreesCelsius":
    	return [TemperatureUnitType, DegreesCelsiusTemperatureUnit]
    case "Temperature_DegreesFahrenheit":
    	return [TemperatureUnitType, DegreesFahrenheitTemperatureUnit]
    case "Temperature_Kelvins":
    	return [TemperatureUnitType, KelvinsTemperatureUnit]
    case "Flow_CubicMetersPerSecond":
    	return [FlowUnitType, CubicMetersPerSecondFlowUnit]
    case "Flow_CubicFeetPerSecond":
    	return [FlowUnitType, CubicFeetPerSecondFlowUnit]
    case "Flow_ThousandCubicFeetPerDay":
    	return [FlowUnitType, ThousandCubicFeetPerDayFlowUnit]
    case "Flow_GallonsUSFluidPerSecond":
    	return [FlowUnitType, GallonsUSFluidPerSecondFlowUnit]
    case "Flow_GallonsUSFluidPerMinute":
    	return [FlowUnitType, GallonsUSFluidPerMinuteFlowUnit]
    case "Flow_BarrelsPerSecond":
    	return [FlowUnitType, BarrelsPerSecondFlowUnit]
    case "Flow_BarrelsPerMinute":
    	return [FlowUnitType, BarrelsPerMinuteFlowUnit]
    case "Volume_CubicMeters":
    	return [VolumeUnitType, CubicMetersVolumeUnit]
    case "Volume_CubicFeet":
    	return [VolumeUnitType, CubicFeetVolumeUnit]
    case "Volume_ThousandsOfCubicFeet":
    	return [VolumeUnitType, ThousandsOfCubicFeetVolumeUnit]
    case "Volume_CubicDecimeter":
    	return [VolumeUnitType, CubicDecimeterVolumeUnit]
    case "Volume_Liter":
    	return [VolumeUnitType, LiterVolumeUnit]
    case "Volume_GallonUSFluid":
    	return [VolumeUnitType, GallonUSFluidVolumeUnit]
    case "Volume_BarrelsOfOil":
    	return [VolumeUnitType, BarrelsOfOilVolumeUnit]
    case "Mass_Kilograms":
    	return [MassUnitType, KilogramsMassUnit]
    case "Mass_Pounds":
    	return [MassUnitType, PoundsMassUnit]
    case "MassFlow_KilogramsPerSecond":
    	return [MassFlowUnitType, KilogramsPerSecondMassFlowUnit]
    case "MassFlow_PoundsPerSecond":
    	return [MassFlowUnitType, PoundsPerSecondMassFlowUnit]
    case "MassFlow_PoundsPerMinute":
    	return [MassFlowUnitType, PoundsPerMinuteMassFlowUnit]
    case "ElectricPotential_Volts":
    	return [ElectricPotentialUnitType, VoltsElectricPotentialUnit]
    case "ElectricPotentialLoaded_Volts":
    	return [ElectricPotentialLoadedUnitType, VoltsElectricPotentialLoadedUnit]
    case "ElectricPotentialUnloaded_Volts":
    	return [ElectricPotentialUnloadedUnitType, VoltsElectricPotentialUnloadedUnit]
    case "Percentage_Percent":
    	return [PercentageUnitType, PercentPercentageUnit]
    case "Fillage_Percent":
    	return [FillageUnitType, PercentFillageUnit]
    case "PumpFillage_Percent":
    	return [PumpFillageUnitType, PercentPumpFillageUnit]
    case "Humidity_Percent":
    	return [HumidityUnitType, PercentHumidityUnit]
    case "Alarm_Percent":
    	return [AlarmUnitType, PercentAlarmUnit]
    case "Work_Joules":
    	return [WorkUnitType, JoulesWorkUnit]
    case "Work_InchPoundsForce":
    	return [WorkUnitType, InchPoundsForceWorkUnit]
    case "Work_CubicFeetOfNaturalGas":
    	return [WorkUnitType, CubicFeetOfNaturalGasWorkUnit]
    case "Work_BarrelsOfOilEquivalent":
    	return [WorkUnitType, BarrelsOfOilEquivalentWorkUnit]
    case "Force_Newtons":
    	return [ForceUnitType, NewtonsForceUnit]
    case "Force_PoundsForce":
    	return [ForceUnitType, PoundsForceForceUnit]
    case "Force_KilogramsForce":
    	return [ForceUnitType, KilogramsForceForceUnit]
    case "Load_Newtons":
    	return [LoadUnitType, NewtonsLoadUnit]
    case "Load_PoundsForce":
    	return [LoadUnitType, PoundsForceLoadUnit]
    case "Load_KilogramsForce":
    	return [LoadUnitType, KilogramsForceLoadUnit]
    case "MaxLoad_Newtons":
    	return [MaxLoadUnitType, NewtonsMaxLoadUnit]
    case "MaxLoad_PoundsForce":
    	return [MaxLoadUnitType, PoundsForceMaxLoadUnit]
    case "MaxLoad_KilogramsForce":
    	return [MaxLoadUnitType, KilogramsForceMaxLoadUnit]
    case "MinLoad_Newtons":
    	return [MinLoadUnitType, NewtonsMinLoadUnit]
    case "MinLoad_PoundsForce":
    	return [MinLoadUnitType, PoundsForceMinLoadUnit]
    case "MinLoad_KilogramsForce":
    	return [MinLoadUnitType, KilogramsForceMinLoadUnit]
    case "FluidLoad_Newtons":
    	return [FluidLoadUnitType, NewtonsFluidLoadUnit]
    case "FluidLoad_PoundsForce":
    	return [FluidLoadUnitType, PoundsForceFluidLoadUnit]
    case "FluidLoad_KilogramsForce":
    	return [FluidLoadUnitType, KilogramsForceFluidLoadUnit]
    case "Length_Meters":
    	return [LengthUnitType, MetersLengthUnit]
    case "Length_Feet":
    	return [LengthUnitType, FeetLengthUnit]
    case "Length_Inches":
    	return [LengthUnitType, InchesLengthUnit]
    case "Stroke_Meters":
    	return [StrokeUnitType, MetersStrokeUnit]
    case "Stroke_Feet":
    	return [StrokeUnitType, FeetStrokeUnit]
    case "Stroke_Inches":
    	return [StrokeUnitType, InchesStrokeUnit]
    case "GrossStroke_Meters":
    	return [GrossStrokeUnitType, MetersGrossStrokeUnit]
    case "GrossStroke_Feet":
    	return [GrossStrokeUnitType, FeetGrossStrokeUnit]
    case "GrossStroke_Inches":
    	return [GrossStrokeUnitType, InchesGrossStrokeUnit]
    case "NetStroke_Meters":
    	return [NetStrokeUnitType, MetersNetStrokeUnit]
    case "NetStroke_Feet":
    	return [NetStrokeUnitType, FeetNetStrokeUnit]
    case "NetStroke_Inches":
    	return [NetStrokeUnitType, InchesNetStrokeUnit]
    case "StrokeRate_StrokesPerSecond":
    	return [StrokeRateUnitType, StrokesPerSecondStrokeRateUnit]
    case "Number_Number":
    	return [NumberUnitType, NumberNumberUnit]
    case "Overspeed_Number":
    	return [OverspeedUnitType, NumberOverspeedUnit]
    case "Underspeed_Number":
    	return [UnderspeedUnitType, NumberUnderspeedUnit]
    case "Totaliser_Number":
    	return [TotaliserUnitType, NumberTotaliserUnit]
    case "WMLFlowRate_Number":
    	return [WMLFlowRateUnitType, NumberWMLFlowRateUnit]
    default:
    	return [NumberUnitType, NumberNumberUnit]
    }
}

// Pressure (UnitType)
// Contains 5 units:
//  - PascalsPressure             Pa => Pa                 = Pa
//  - KilopascalsPressure         Pa => Pa * 0.001         = kPa
//  - MegapascalsPressure         Pa => Pa * 0.000,001     = MPa
//  - PoundsPerSquareInchPressure Pa => Pa * 0.000,145,038 = psi
//  - InchesOfWaterPressure       Pa => Pa * 0.004,014,74  = inH₂O
// Base: PascalsPressure

export const PressureUnitType = new UnitType(
	// title
	'Pressure',
	// name
	'Pressure',
	// unitList
	["Pascals","Kilopascals","Megapascals","Pounds per Square Inch","Inches of Water"],
	// matchList
	["pressure"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// PascalsPressure (Unit)
// UnitType     : Pressure
// UnitType.Base: PascalsPressure
// Unit.FromBase: Pa => Pa = Pa
// Unit.ToBase  : Pa => Pa = Pa

export const PascalsPressureUnit = new Unit(
	// title
	'Pascals',
	// name
	'Pascals',
	// symbol
	'Pa',
	// matchList
	["pa","pascal","pascals"],
	// type
	PressureUnitType,
	// base
	null,
		// fromBase converts Pa to Pa
	function fromBase (Pa: scalar): scalar {
	    return Pa
	},
		// toBase converts Pa to Pa
	function toBase (Pa: scalar): scalar {
	    return Pa
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// KilopascalsPressure (Unit)
// UnitType     : Pressure
// UnitType.Base: PascalsPressure
// Unit.FromBase: Pa => Pa * 0.001   = kPa
// Unit.ToBase  : kPa => kPa * 1,000 = Pa

export const KilopascalsPressureUnit = new Unit(
	// title
	'Kilopascals',
	// name
	'Kilopascals',
	// symbol
	'kPa',
	// matchList
	["kpa","kilopascal","kilopascals"],
	// type
	PressureUnitType,
	// base
	PascalsPressureUnit,
		// fromBase converts Pa to kPa
	function fromBase (Pa: scalar): scalar {
	    return Pa * 0.001
	},
		// toBase converts kPa to Pa
	function toBase (kPa: scalar): scalar {
	    return kPa * 1000
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// MegapascalsPressure (Unit)
// UnitType     : Pressure
// UnitType.Base: PascalsPressure
// Unit.FromBase: Pa => Pa * 0.000,001   = MPa
// Unit.ToBase  : MPa => MPa * 1,000,000 = Pa

export const MegapascalsPressureUnit = new Unit(
	// title
	'Megapascals',
	// name
	'Megapascals',
	// symbol
	'MPa',
	// matchList
	["mpa","megapascal","megapascals"],
	// type
	PressureUnitType,
	// base
	PascalsPressureUnit,
		// fromBase converts Pa to MPa
	function fromBase (Pa: scalar): scalar {
	    return Pa * 0.000001
	},
		// toBase converts MPa to Pa
	function toBase (MPa: scalar): scalar {
	    return MPa * 1000000
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// PoundsPerSquareInchPressure (Unit)
// UnitType     : Pressure
// UnitType.Base: PascalsPressure
// Unit.FromBase: Pa => Pa * 0.000,145,038 = psi
// Unit.ToBase  : psi => psi * 6,894.76    = Pa

export const PoundsPerSquareInchPressureUnit = new Unit(
	// title
	'PoundsPerSquareInch',
	// name
	'Pounds per Square Inch',
	// symbol
	'psi',
	// matchList
	["psi","poundspersquareinch","poundpersquareinch"],
	// type
	PressureUnitType,
	// base
	PascalsPressureUnit,
		// fromBase converts Pa to psi
	function fromBase (Pa: scalar): scalar {
	    return Pa * 0.000145038
	},
		// toBase converts psi to Pa
	function toBase (psi: scalar): scalar {
	    return psi * 6894.76
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// InchesOfWaterPressure (Unit)
// UnitType     : Pressure
// UnitType.Base: PascalsPressure
// Unit.FromBase: Pa => Pa * 0.004,014,74  = inH₂O
// Unit.ToBase  : inH2O => inH2O * 249.082 = Pa

export const InchesOfWaterPressureUnit = new Unit(
	// title
	'InchesOfWater',
	// name
	'Inches of Water',
	// symbol
	'inH₂O',
	// matchList
	["inh₂o","inh₂0","inh2o","inh20","incheswater","inchesofwater","inchwater","inchofwater"],
	// type
	PressureUnitType,
	// base
	PascalsPressureUnit,
		// fromBase converts Pa to inH₂O
	function fromBase (Pa: scalar): scalar {
	    return Pa * 0.00401474
	},
		// toBase converts inH₂O to Pa
	function toBase (inH2O: scalar): scalar {
	    return inH2O * 249.082
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

PressureUnitType.base = PascalsPressureUnit
PressureUnitType.units = [PascalsPressureUnit,KilopascalsPressureUnit,MegapascalsPressureUnit,PoundsPerSquareInchPressureUnit,InchesOfWaterPressureUnit]

// Temperature (UnitType)
// Contains 3 units:
//  - DegreesCelsiusTemperature    C => C                  = °C
//  - DegreesFahrenheitTemperature C => (C * (9 / 5)) + 32 = °F
//  - KelvinsTemperature           C => C + 273.15         = K
// Base: DegreesCelsiusTemperature

export const TemperatureUnitType = new UnitType(
	// title
	'Temperature',
	// name
	'Temperature',
	// unitList
	["Degrees Celsius","Degrees Fahrenheit","Kelvins"],
	// matchList
	["temperature","temp"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// DegreesCelsiusTemperature (Unit)
// UnitType     : Temperature
// UnitType.Base: DegreesCelsiusTemperature
// Unit.FromBase: C => C = °C
// Unit.ToBase  : C => C = °C

export const DegreesCelsiusTemperatureUnit = new Unit(
	// title
	'DegreesCelsius',
	// name
	'Degrees Celsius',
	// symbol
	'°C',
	// matchList
	["c","°c","celsius","degreesc","degreec","degreescelsius","degreecelsius"],
	// type
	TemperatureUnitType,
	// base
	null,
		// fromBase converts °C to °C
	function fromBase (C: scalar): scalar {
	    return C
	},
		// toBase converts °C to °C
	function toBase (C: scalar): scalar {
	    return C
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// DegreesFahrenheitTemperature (Unit)
// UnitType     : Temperature
// UnitType.Base: DegreesCelsiusTemperature
// Unit.FromBase: C => (C * (9 / 5)) + 32 = °F
// Unit.ToBase  : F => (F - 32) * (5 / 9) = °C

export const DegreesFahrenheitTemperatureUnit = new Unit(
	// title
	'DegreesFahrenheit',
	// name
	'Degrees Fahrenheit',
	// symbol
	'°F',
	// matchList
	["f","°f","fahrenheit","degreesf","degreef","degreesfahrenheit","degreefahrenheit"],
	// type
	TemperatureUnitType,
	// base
	DegreesCelsiusTemperatureUnit,
		// fromBase converts °C to °F
	function fromBase (C: scalar): scalar {
	    return (C * (9 / 5)) + 32
	},
		// toBase converts °F to °C
	function toBase (F: scalar): scalar {
	    return (F - 32) * (5 / 9)
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// KelvinsTemperature (Unit)
// UnitType     : Temperature
// UnitType.Base: DegreesCelsiusTemperature
// Unit.FromBase: C => C + 273.15 = K
// Unit.ToBase  : K => K - 273.15 = °C

export const KelvinsTemperatureUnit = new Unit(
	// title
	'Kelvins',
	// name
	'Kelvins',
	// symbol
	'K',
	// matchList
	["k","°k","kelvin","kelvins","degreesk","degreek","degreeskelvin","degreekelvin"],
	// type
	TemperatureUnitType,
	// base
	DegreesCelsiusTemperatureUnit,
		// fromBase converts °C to K
	function fromBase (C: scalar): scalar {
	    return C + 273.15
	},
		// toBase converts K to °C
	function toBase (K: scalar): scalar {
	    return K - 273.15
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

TemperatureUnitType.base = DegreesCelsiusTemperatureUnit
TemperatureUnitType.units = [DegreesCelsiusTemperatureUnit,DegreesFahrenheitTemperatureUnit,KelvinsTemperatureUnit]

// Flow (UnitType)
// Contains 7 units:
//  - CubicMetersPerSecondFlow    m3s => m3s            = m³/s
//  - CubicFeetPerSecondFlow      m3s => m3s * 35.314,7 = ft³/s
//  - ThousandCubicFeetPerDayFlow m3s => m3s * 3,051.19 = MCFD
//  - GallonsUSFluidPerSecondFlow m3s => m3s * 264.172  = gal/s
//  - GallonsUSFluidPerMinuteFlow m3s => m3s * 15850.3  = gal/min
//  - BarrelsPerSecondFlow        m3s => m3s * 6.289,81 = bbl/s
//  - BarrelsPerMinuteFlow        m3s => m3s * 377.389  = bbl/min
// Base: CubicMetersPerSecondFlow

export const FlowUnitType = new UnitType(
	// title
	'Flow',
	// name
	'Flow',
	// unitList
	["Cubic Meters per Second","Cubic Feet per Second","Thousand Cubic Feet per Day","Gallons (U.S. Fluid) per Second","Gallons (U.S. Fluid) per Minute","Barrels per Second","Barrels per Minute"],
	// matchList
	["flow","flowrate","flow_rate","gasflow","gasflowrate","gas_flow","gas_flow_rate"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// CubicMetersPerSecondFlow (Unit)
// UnitType     : Flow
// UnitType.Base: CubicMetersPerSecondFlow
// Unit.FromBase: m3s => m3s = m³/s
// Unit.ToBase  : m3s => m3s = m³/s

export const CubicMetersPerSecondFlowUnit = new Unit(
	// title
	'CubicMetersPerSecond',
	// name
	'Cubic Meters per Second',
	// symbol
	'm³/s',
	// matchList
	["m³/s","m³s","m3/s","m3s","m^3/s","m^3s","cubicmeterspersecond","cubicmeterpersecond","cubicmeters/second","cubicmeter/second"],
	// type
	FlowUnitType,
	// base
	null,
		// fromBase converts m³/s to m³/s
	function fromBase (m3s: scalar): scalar {
	    return m3s
	},
		// toBase converts m³/s to m³/s
	function toBase (m3s: scalar): scalar {
	    return m3s
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// CubicFeetPerSecondFlow (Unit)
// UnitType     : Flow
// UnitType.Base: CubicMetersPerSecondFlow
// Unit.FromBase: m3s => m3s * 35.314,7      = ft³/s
// Unit.ToBase  : ft3s => ft3s * 0.028,316,8 = m³/s

export const CubicFeetPerSecondFlowUnit = new Unit(
	// title
	'CubicFeetPerSecond',
	// name
	'Cubic Feet per Second',
	// symbol
	'ft³/s',
	// matchList
	["ft³/s","ft³s","ft3/s","ft3s","ft^3/s","ft^3s","f³/s","f³s","f3/s","f3s","f^3/s","f^3s","cubicfeetpersecond","cubicfootpersecond","cubicfeet/second","cubicfoot/second"],
	// type
	FlowUnitType,
	// base
	CubicMetersPerSecondFlowUnit,
		// fromBase converts m³/s to ft³/s
	function fromBase (m3s: scalar): scalar {
	    return m3s * 35.3147
	},
		// toBase converts ft³/s to m³/s
	function toBase (ft3s: scalar): scalar {
	    return ft3s * 0.0283168
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// ThousandCubicFeetPerDayFlow (Unit)
// UnitType     : Flow
// UnitType.Base: CubicMetersPerSecondFlow
// Unit.FromBase: m3s => m3s * 3,051.19        = MCFD
// Unit.ToBase  : MCFD => MCFD * 0.000,327,741 = m³/s

export const ThousandCubicFeetPerDayFlowUnit = new Unit(
	// title
	'ThousandCubicFeetPerDay',
	// name
	'Thousand Cubic Feet per Day',
	// symbol
	'MCFD',
	// matchList
	["mcfd","mcf/d","mcftd","mcft/d","mft³/d","mft³d","mft3/d","mft3d","mft^3/d","mft^3d","mf³/d","mf³d","mf3/d","mf3d","mf^3/d","mf^3d","thousandcubicfeetperday","thousandcubicfeet/day"],
	// type
	FlowUnitType,
	// base
	CubicMetersPerSecondFlowUnit,
		// fromBase converts m³/s to MCFD
	function fromBase (m3s: scalar): scalar {
	    return m3s * 3051.19
	},
		// toBase converts MCFD to m³/s
	function toBase (MCFD: scalar): scalar {
	    return MCFD * 0.000327741
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// GallonsUSFluidPerSecondFlow (Unit)
// UnitType     : Flow
// UnitType.Base: CubicMetersPerSecondFlow
// Unit.FromBase: m3s => m3s * 264.172        = gal/s
// Unit.ToBase  : gals => gals * 0.003,785,41 = m³/s

export const GallonsUSFluidPerSecondFlowUnit = new Unit(
	// title
	'GallonsUSFluidPerSecond',
	// name
	'Gallons (U.S. Fluid) per Second',
	// symbol
	'gal/s',
	// matchList
	["gal/s","gals/s","gals","galss","gps","gallonspersecond","gallonpersecond","gallons/second","gallon/second"],
	// type
	FlowUnitType,
	// base
	CubicMetersPerSecondFlowUnit,
		// fromBase converts m³/s to gal/s
	function fromBase (m3s: scalar): scalar {
	    return m3s * 264.172
	},
		// toBase converts gal/s to m³/s
	function toBase (gals: scalar): scalar {
	    return gals * 0.00378541
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// GallonsUSFluidPerMinuteFlow (Unit)
// UnitType     : Flow
// UnitType.Base: CubicMetersPerSecondFlow
// Unit.FromBase: m3s => m3s * 15850.3           = gal/min
// Unit.ToBase  : galm => galm * 0.000,063,090,2 = m³/s

export const GallonsUSFluidPerMinuteFlowUnit = new Unit(
	// title
	'GallonsUSFluidPerMinute',
	// name
	'Gallons (U.S. Fluid) per Minute',
	// symbol
	'gal/min',
	// matchList
	["gal/m","gals/m","galm","galsm","gpm","gallonsperminute","gallonperminute","gallonspermin","gallonpermin","gallons/minute","gallons/min","gallon/minute","gallon/min"],
	// type
	FlowUnitType,
	// base
	CubicMetersPerSecondFlowUnit,
		// fromBase converts m³/s to gal/min
	function fromBase (m3s: scalar): scalar {
	    return m3s * 15850.3
	},
		// toBase converts gal/min to m³/s
	function toBase (galm: scalar): scalar {
	    return galm * 0.0000630902
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// BarrelsPerSecondFlow (Unit)
// UnitType     : Flow
// UnitType.Base: CubicMetersPerSecondFlow
// Unit.FromBase: m3s => m3s * 6.289,81    = bbl/s
// Unit.ToBase  : bbls => bbls * 0.158,987 = m³/s

export const BarrelsPerSecondFlowUnit = new Unit(
	// title
	'BarrelsPerSecond',
	// name
	'Barrels per Second',
	// symbol
	'bbl/s',
	// matchList
	["bbl/s","bbl/second","bbls","barrelpersecond","barrelspersecond","barrels/second","barrel/second"],
	// type
	FlowUnitType,
	// base
	CubicMetersPerSecondFlowUnit,
		// fromBase converts m³/s to bbl/s
	function fromBase (m3s: scalar): scalar {
	    return m3s * 6.28981
	},
		// toBase converts bbl/s to m³/s
	function toBase (bbls: scalar): scalar {
	    return bbls * 0.158987
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// BarrelsPerMinuteFlow (Unit)
// UnitType     : Flow
// UnitType.Base: CubicMetersPerSecondFlow
// Unit.FromBase: m3s => m3s * 377.389        = bbl/min
// Unit.ToBase  : bblm => bblm * 0.002,649,79 = m³/s

export const BarrelsPerMinuteFlowUnit = new Unit(
	// title
	'BarrelsPerMinute',
	// name
	'Barrels per Minute',
	// symbol
	'bbl/min',
	// matchList
	["bbl/min","bbl/minute","bbl/m","bblm","barrelspermin","barrelsperminute","barrelpermin","barrelperminute","barrels/min","barrels/minute","barrel/min","barrel/minute"],
	// type
	FlowUnitType,
	// base
	CubicMetersPerSecondFlowUnit,
		// fromBase converts m³/s to bbl/min
	function fromBase (m3s: scalar): scalar {
	    return m3s * 377.389
	},
		// toBase converts bbl/min to m³/s
	function toBase (bblm: scalar): scalar {
	    return bblm * 0.00264979
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

FlowUnitType.base = CubicMetersPerSecondFlowUnit
FlowUnitType.units = [CubicMetersPerSecondFlowUnit,CubicFeetPerSecondFlowUnit,ThousandCubicFeetPerDayFlowUnit,GallonsUSFluidPerSecondFlowUnit,GallonsUSFluidPerMinuteFlowUnit,BarrelsPerSecondFlowUnit,BarrelsPerMinuteFlowUnit]

// Volume (UnitType)
// Contains 7 units:
//  - CubicMetersVolume          m3 => m3               = m³
//  - CubicFeetVolume            m3 => m3 * 35.314,7    = cu ft
//  - ThousandsOfCubicFeetVolume m3 => m3 * 0.035,314,7 = MCF
//  - CubicDecimeterVolume       m3 => m3 * 1,000       = dm³
//  - LiterVolume                m3 => m3 * 1,000       = L
//  - GallonUSFluidVolume        m3 => m3 * 264.172     = gal (US)
//  - BarrelsOfOilVolume         m3 => m3 * 6.289,81    = bbl
// Base: CubicMetersVolume

export const VolumeUnitType = new UnitType(
	// title
	'Volume',
	// name
	'Volume',
	// unitList
	["Cubic Meters","Cubic Feet","Thousands of Cubic Feet","Cubic Decimeter","Liter","Gallon (U.S. Fluid)","Barrels of Oil"],
	// matchList
	["volume"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// CubicMetersVolume (Unit)
// UnitType     : Volume
// UnitType.Base: CubicMetersVolume
// Unit.FromBase: m3 => m3 = m³
// Unit.ToBase  : m3 => m3 = m³

export const CubicMetersVolumeUnit = new Unit(
	// title
	'CubicMeters',
	// name
	'Cubic Meters',
	// symbol
	'm³',
	// matchList
	["m³","m3","cubicmeter","cubicmeters"],
	// type
	VolumeUnitType,
	// base
	null,
		// fromBase converts m³ to m³
	function fromBase (m3: scalar): scalar {
	    return m3
	},
		// toBase converts m³ to m³
	function toBase (m3: scalar): scalar {
	    return m3
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// CubicFeetVolume (Unit)
// UnitType     : Volume
// UnitType.Base: CubicMetersVolume
// Unit.FromBase: m3 => m3 * 35.314,7        = cu ft
// Unit.ToBase  : cuft => cuft * 0.028,316,8 = m³

export const CubicFeetVolumeUnit = new Unit(
	// title
	'CubicFeet',
	// name
	'Cubic Feet',
	// symbol
	'cu ft',
	// matchList
	["cuft","ft³","f³","cubicfoot","cubicfeet"],
	// type
	VolumeUnitType,
	// base
	CubicMetersVolumeUnit,
		// fromBase converts m³ to cu ft
	function fromBase (m3: scalar): scalar {
	    return m3 * 35.3147
	},
		// toBase converts cu ft to m³
	function toBase (cuft: scalar): scalar {
	    return cuft * 0.0283168
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// ThousandsOfCubicFeetVolume (Unit)
// UnitType     : Volume
// UnitType.Base: CubicMetersVolume
// Unit.FromBase: m3 => m3 * 0.035,314,7 = MCF
// Unit.ToBase  : MCF => MCF * 28.316,8  = m³

export const ThousandsOfCubicFeetVolumeUnit = new Unit(
	// title
	'ThousandsOfCubicFeet',
	// name
	'Thousands of Cubic Feet',
	// symbol
	'MCF',
	// matchList
	["mcf","mft³","mf³","thousandcubicfeet","thousandsofcubicfeet","thousandscubicfeet"],
	// type
	VolumeUnitType,
	// base
	CubicMetersVolumeUnit,
		// fromBase converts m³ to MCF
	function fromBase (m3: scalar): scalar {
	    return m3 * 0.0353147
	},
		// toBase converts MCF to m³
	function toBase (MCF: scalar): scalar {
	    return MCF * 28.3168
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// CubicDecimeterVolume (Unit)
// UnitType     : Volume
// UnitType.Base: CubicMetersVolume
// Unit.FromBase: m3 => m3 * 1,000   = dm³
// Unit.ToBase  : dm3 => dm3 * 0.001 = m³

export const CubicDecimeterVolumeUnit = new Unit(
	// title
	'CubicDecimeter',
	// name
	'Cubic Decimeter',
	// symbol
	'dm³',
	// matchList
	["dm³","dm3","cubicdecimeter","cubicdecimeters"],
	// type
	VolumeUnitType,
	// base
	CubicMetersVolumeUnit,
		// fromBase converts m³ to dm³
	function fromBase (m3: scalar): scalar {
	    return m3 * 1000
	},
		// toBase converts dm³ to m³
	function toBase (dm3: scalar): scalar {
	    return dm3 * 0.001
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// LiterVolume (Unit)
// UnitType     : Volume
// UnitType.Base: CubicMetersVolume
// Unit.FromBase: m3 => m3 * 1,000 = L
// Unit.ToBase  : L => L * 0.001   = m³

export const LiterVolumeUnit = new Unit(
	// title
	'Liter',
	// name
	'Liter',
	// symbol
	'L',
	// matchList
	["l","liter","liters","litre","litres"],
	// type
	VolumeUnitType,
	// base
	CubicMetersVolumeUnit,
		// fromBase converts m³ to L
	function fromBase (m3: scalar): scalar {
	    return m3 * 1000
	},
		// toBase converts L to m³
	function toBase (L: scalar): scalar {
	    return L * 0.001
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// GallonUSFluidVolume (Unit)
// UnitType     : Volume
// UnitType.Base: CubicMetersVolume
// Unit.FromBase: m3 => m3 * 264.172        = gal (US)
// Unit.ToBase  : gal => gal * 0.003,785,41 = m³

export const GallonUSFluidVolumeUnit = new Unit(
	// title
	'GallonUSFluid',
	// name
	'Gallon (U.S. Fluid)',
	// symbol
	'gal (US)',
	// matchList
	["gal","gallon","gals","gallons","gal(us)","gallon(us)","gals(us)","gallons(us)","gal(u.s.)","gallon(u.s.)","gals(u.s.)","gallons(u.s.)","gal(usfluid)","gallon(usfluid)","gals(usfluid)","gallons(usfluid)","gal(u.s.fluid)","gallon(u.s.fluid)","gals(u.s.fluid)","gallons(u.s.fluid)"],
	// type
	VolumeUnitType,
	// base
	CubicMetersVolumeUnit,
		// fromBase converts m³ to gal (US)
	function fromBase (m3: scalar): scalar {
	    return m3 * 264.172
	},
		// toBase converts gal (US) to m³
	function toBase (gal: scalar): scalar {
	    return gal * 0.00378541
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// BarrelsOfOilVolume (Unit)
// UnitType     : Volume
// UnitType.Base: CubicMetersVolume
// Unit.FromBase: m3 => m3 * 6.289,81    = bbl
// Unit.ToBase  : bbl => bbl * 0.158,987 = m³

export const BarrelsOfOilVolumeUnit = new Unit(
	// title
	'BarrelsOfOil',
	// name
	'Barrels of Oil',
	// symbol
	'bbl',
	// matchList
	["bbl","bbls","barrelsofoil","barrelofoil"],
	// type
	VolumeUnitType,
	// base
	CubicMetersVolumeUnit,
		// fromBase converts m³ to bbl
	function fromBase (m3: scalar): scalar {
	    return m3 * 6.28981
	},
		// toBase converts bbl to m³
	function toBase (bbl: scalar): scalar {
	    return bbl * 0.158987
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

VolumeUnitType.base = CubicMetersVolumeUnit
VolumeUnitType.units = [CubicMetersVolumeUnit,CubicFeetVolumeUnit,ThousandsOfCubicFeetVolumeUnit,CubicDecimeterVolumeUnit,LiterVolumeUnit,GallonUSFluidVolumeUnit,BarrelsOfOilVolumeUnit]

// Mass (UnitType)
// Contains 2 units:
//  - KilogramsMass kg => kg            = kg
//  - PoundsMass    kg => kg * 2.204,62 = lb
// Base: KilogramsMass

export const MassUnitType = new UnitType(
	// title
	'Mass',
	// name
	'Mass',
	// unitList
	["Kilograms","Pounds"],
	// matchList
	["mass"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// KilogramsMass (Unit)
// UnitType     : Mass
// UnitType.Base: KilogramsMass
// Unit.FromBase: kg => kg = kg
// Unit.ToBase  : kg => kg = kg

export const KilogramsMassUnit = new Unit(
	// title
	'Kilograms',
	// name
	'Kilograms',
	// symbol
	'kg',
	// matchList
	["kg","kilogram","kilo","kgs","kilograms","kilos"],
	// type
	MassUnitType,
	// base
	null,
		// fromBase converts kg to kg
	function fromBase (kg: scalar): scalar {
	    return kg
	},
		// toBase converts kg to kg
	function toBase (kg: scalar): scalar {
	    return kg
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// PoundsMass (Unit)
// UnitType     : Mass
// UnitType.Base: KilogramsMass
// Unit.FromBase: kg => kg * 2.204,62  = lb
// Unit.ToBase  : lb => lb * 0.453,592 = kg

export const PoundsMassUnit = new Unit(
	// title
	'Pounds',
	// name
	'Pounds',
	// symbol
	'lb',
	// matchList
	["lb","lbs","pound","pounds"],
	// type
	MassUnitType,
	// base
	KilogramsMassUnit,
		// fromBase converts kg to lb
	function fromBase (kg: scalar): scalar {
	    return kg * 2.20462
	},
		// toBase converts lb to kg
	function toBase (lb: scalar): scalar {
	    return lb * 0.453592
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

MassUnitType.base = KilogramsMassUnit
MassUnitType.units = [KilogramsMassUnit,PoundsMassUnit]

// MassFlow (UnitType)
// Contains 3 units:
//  - KilogramsPerSecondMassFlow kgs => kgs            = kg/s
//  - PoundsPerSecondMassFlow    kgs => kgs * 2.204,62 = lb/s
//  - PoundsPerMinuteMassFlow    kgs => kgs * 132.277  = lb/min
// Base: KilogramsPerSecondMassFlow

export const MassFlowUnitType = new UnitType(
	// title
	'MassFlow',
	// name
	'Mass Flow',
	// unitList
	["Kilograms per Second","Pounds per Second","Pounds per Minute"],
	// matchList
	["massflow","massflowrate","flow(mass)","flowrate(mass)"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// KilogramsPerSecondMassFlow (Unit)
// UnitType     : MassFlow
// UnitType.Base: KilogramsPerSecondMassFlow
// Unit.FromBase: kgs => kgs = kg/s
// Unit.ToBase  : kgs => kgs = kg/s

export const KilogramsPerSecondMassFlowUnit = new Unit(
	// title
	'KilogramsPerSecond',
	// name
	'Kilograms per Second',
	// symbol
	'kg/s',
	// matchList
	["kg/s","kgs","kilogrampersecond","kilopersecond","kgpersecond","kilogramspersecond","kilospersecond","kgspersecond","kilogram/second","kilo/second","kg/second","kilograms/second","kilos/second","kgs/second"],
	// type
	MassFlowUnitType,
	// base
	null,
		// fromBase converts kg/s to kg/s
	function fromBase (kgs: scalar): scalar {
	    return kgs
	},
		// toBase converts kg/s to kg/s
	function toBase (kgs: scalar): scalar {
	    return kgs
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// PoundsPerSecondMassFlow (Unit)
// UnitType     : MassFlow
// UnitType.Base: KilogramsPerSecondMassFlow
// Unit.FromBase: kgs => kgs * 2.204,62  = lb/s
// Unit.ToBase  : lbs => lbs * 0.453,592 = kg/s

export const PoundsPerSecondMassFlowUnit = new Unit(
	// title
	'PoundsPerSecond',
	// name
	'Pounds per Second',
	// symbol
	'lb/s',
	// matchList
	["lb/s","lbs/s","lbs","lbss","poundpersecond","poundspersecond","pound/second","pounds/second"],
	// type
	MassFlowUnitType,
	// base
	KilogramsPerSecondMassFlowUnit,
		// fromBase converts kg/s to lb/s
	function fromBase (kgs: scalar): scalar {
	    return kgs * 2.20462
	},
		// toBase converts lb/s to kg/s
	function toBase (lbs: scalar): scalar {
	    return lbs * 0.453592
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// PoundsPerMinuteMassFlow (Unit)
// UnitType     : MassFlow
// UnitType.Base: KilogramsPerSecondMassFlow
// Unit.FromBase: kgs => kgs * 132.277          = lb/min
// Unit.ToBase  : lbmin => lbmin * 0.007,559,87 = kg/s

export const PoundsPerMinuteMassFlowUnit = new Unit(
	// title
	'PoundsPerMinute',
	// name
	'Pounds per Minute',
	// symbol
	'lb/min',
	// matchList
	["lb/min","lbs/min","lbmin","lbsmin","lb/m","lbs/m","lbm","lbsm","poundperminute","poundsperminute","pound/minute","pounds/minute","poundpermin","poundspermin","pound/min","pounds/min"],
	// type
	MassFlowUnitType,
	// base
	KilogramsPerSecondMassFlowUnit,
		// fromBase converts kg/s to lb/min
	function fromBase (kgs: scalar): scalar {
	    return kgs * 132.277
	},
		// toBase converts lb/min to kg/s
	function toBase (lbmin: scalar): scalar {
	    return lbmin * 0.00755987
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

MassFlowUnitType.base = KilogramsPerSecondMassFlowUnit
MassFlowUnitType.units = [KilogramsPerSecondMassFlowUnit,PoundsPerSecondMassFlowUnit,PoundsPerMinuteMassFlowUnit]

// ElectricPotential (UnitType)
// Contains 1 units:
//  - VoltsElectricPotential V => V = V
// Base: VoltsElectricPotential

export const ElectricPotentialUnitType = new UnitType(
	// title
	'ElectricPotential',
	// name
	'Electric Potential',
	// unitList
	["Volts"],
	// matchList
	["electricpotential","voltage"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// VoltsElectricPotential (Unit)
// UnitType     : ElectricPotential
// UnitType.Base: VoltsElectricPotential
// Unit.FromBase: V => V = V
// Unit.ToBase  : V => V = V

export const VoltsElectricPotentialUnit = new Unit(
	// title
	'Volts',
	// name
	'Volts',
	// symbol
	'V',
	// matchList
	["volt","volts","v"],
	// type
	ElectricPotentialUnitType,
	// base
	null,
		// fromBase converts V to V
	function fromBase (V: scalar): scalar {
	    return V
	},
		// toBase converts V to V
	function toBase (V: scalar): scalar {
	    return V
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

ElectricPotentialUnitType.base = VoltsElectricPotentialUnit
ElectricPotentialUnitType.units = [VoltsElectricPotentialUnit]

// ElectricPotentialLoaded (UnitType)
// Contains 1 units:
//  - VoltsElectricPotentialLoaded V => V = V
// Base: VoltsElectricPotentialLoaded

export const ElectricPotentialLoadedUnitType = new UnitType(
	// title
	'ElectricPotentialLoaded',
	// name
	'Electric Potential Loaded',
	// unitList
	["Volts"],
	// matchList
	["electricpotentialloaded","voltageloaded"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// VoltsElectricPotentialLoaded (Unit)
// UnitType     : ElectricPotentialLoaded
// UnitType.Base: VoltsElectricPotentialLoaded
// Unit.FromBase: V => V = V
// Unit.ToBase  : V => V = V

export const VoltsElectricPotentialLoadedUnit = new Unit(
	// title
	'Volts',
	// name
	'Volts',
	// symbol
	'V',
	// matchList
	["volt","volts","v"],
	// type
	ElectricPotentialLoadedUnitType,
	// base
	null,
		// fromBase converts V to V
	function fromBase (V: scalar): scalar {
	    return V
	},
		// toBase converts V to V
	function toBase (V: scalar): scalar {
	    return V
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

ElectricPotentialLoadedUnitType.base = VoltsElectricPotentialLoadedUnit
ElectricPotentialLoadedUnitType.units = [VoltsElectricPotentialLoadedUnit]

// ElectricPotentialUnloaded (UnitType)
// Contains 1 units:
//  - VoltsElectricPotentialUnloaded V => V = V
// Base: VoltsElectricPotentialUnloaded

export const ElectricPotentialUnloadedUnitType = new UnitType(
	// title
	'ElectricPotentialUnloaded',
	// name
	'Electric Potential Unloaded',
	// unitList
	["Volts"],
	// matchList
	["electricpotentialunloaded","voltageunloaded"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// VoltsElectricPotentialUnloaded (Unit)
// UnitType     : ElectricPotentialUnloaded
// UnitType.Base: VoltsElectricPotentialUnloaded
// Unit.FromBase: V => V = V
// Unit.ToBase  : V => V = V

export const VoltsElectricPotentialUnloadedUnit = new Unit(
	// title
	'Volts',
	// name
	'Volts',
	// symbol
	'V',
	// matchList
	["volt","volts","v"],
	// type
	ElectricPotentialUnloadedUnitType,
	// base
	null,
		// fromBase converts V to V
	function fromBase (V: scalar): scalar {
	    return V
	},
		// toBase converts V to V
	function toBase (V: scalar): scalar {
	    return V
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

ElectricPotentialUnloadedUnitType.base = VoltsElectricPotentialUnloadedUnit
ElectricPotentialUnloadedUnitType.units = [VoltsElectricPotentialUnloadedUnit]

// Percentage (UnitType)
// Contains 1 units:
//  - PercentPercentage p => p = %
// Base: PercentPercentage

export const PercentageUnitType = new UnitType(
	// title
	'Percentage',
	// name
	'Percentage',
	// unitList
	["Percent"],
	// matchList
	["percentage"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// PercentPercentage (Unit)
// UnitType     : Percentage
// UnitType.Base: PercentPercentage
// Unit.FromBase: p => p = %
// Unit.ToBase  : p => p = %

export const PercentPercentageUnit = new Unit(
	// title
	'Percent',
	// name
	'Percent',
	// symbol
	'%',
	// matchList
	["%","percent","percentage"],
	// type
	PercentageUnitType,
	// base
	null,
		// fromBase converts % to %
	function fromBase (p: scalar): scalar {
	    return p
	},
		// toBase converts % to %
	function toBase (p: scalar): scalar {
	    return p
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

PercentageUnitType.base = PercentPercentageUnit
PercentageUnitType.units = [PercentPercentageUnit]

// Fillage (UnitType)
// Contains 1 units:
//  - PercentFillage p => p = %
// Base: PercentFillage

export const FillageUnitType = new UnitType(
	// title
	'Fillage',
	// name
	'Fillage',
	// unitList
	["Percent"],
	// matchList
	["fillage"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// PercentFillage (Unit)
// UnitType     : Fillage
// UnitType.Base: PercentFillage
// Unit.FromBase: p => p = %
// Unit.ToBase  : p => p = %

export const PercentFillageUnit = new Unit(
	// title
	'Percent',
	// name
	'Percent',
	// symbol
	'%',
	// matchList
	["%","percent","percentage"],
	// type
	FillageUnitType,
	// base
	null,
		// fromBase converts % to %
	function fromBase (p: scalar): scalar {
	    return p
	},
		// toBase converts % to %
	function toBase (p: scalar): scalar {
	    return p
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

FillageUnitType.base = PercentFillageUnit
FillageUnitType.units = [PercentFillageUnit]

// PumpFillage (UnitType)
// Contains 1 units:
//  - PercentPumpFillage p => p = %
// Base: PercentPumpFillage

export const PumpFillageUnitType = new UnitType(
	// title
	'PumpFillage',
	// name
	'Pump Fillage',
	// unitList
	["Percent"],
	// matchList
	["pumpfillage"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// PercentPumpFillage (Unit)
// UnitType     : PumpFillage
// UnitType.Base: PercentPumpFillage
// Unit.FromBase: p => p = %
// Unit.ToBase  : p => p = %

export const PercentPumpFillageUnit = new Unit(
	// title
	'Percent',
	// name
	'Percent',
	// symbol
	'%',
	// matchList
	["%","percent","percentage"],
	// type
	PumpFillageUnitType,
	// base
	null,
		// fromBase converts % to %
	function fromBase (p: scalar): scalar {
	    return p
	},
		// toBase converts % to %
	function toBase (p: scalar): scalar {
	    return p
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

PumpFillageUnitType.base = PercentPumpFillageUnit
PumpFillageUnitType.units = [PercentPumpFillageUnit]

// Humidity (UnitType)
// Contains 1 units:
//  - PercentHumidity p => p = %
// Base: PercentHumidity

export const HumidityUnitType = new UnitType(
	// title
	'Humidity',
	// name
	'Humidity',
	// unitList
	["Percent"],
	// matchList
	["humidity"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// PercentHumidity (Unit)
// UnitType     : Humidity
// UnitType.Base: PercentHumidity
// Unit.FromBase: p => p = %
// Unit.ToBase  : p => p = %

export const PercentHumidityUnit = new Unit(
	// title
	'Percent',
	// name
	'Percent',
	// symbol
	'%',
	// matchList
	["%","percent","percentage"],
	// type
	HumidityUnitType,
	// base
	null,
		// fromBase converts % to %
	function fromBase (p: scalar): scalar {
	    return p
	},
		// toBase converts % to %
	function toBase (p: scalar): scalar {
	    return p
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

HumidityUnitType.base = PercentHumidityUnit
HumidityUnitType.units = [PercentHumidityUnit]

// Alarm (UnitType)
// Contains 1 units:
//  - PercentAlarm p => p = %
// Base: PercentAlarm

export const AlarmUnitType = new UnitType(
	// title
	'Alarm',
	// name
	'Alarm',
	// unitList
	["Percent"],
	// matchList
	["alarm"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// PercentAlarm (Unit)
// UnitType     : Alarm
// UnitType.Base: PercentAlarm
// Unit.FromBase: p => p = %
// Unit.ToBase  : p => p = %

export const PercentAlarmUnit = new Unit(
	// title
	'Percent',
	// name
	'Percent',
	// symbol
	'%',
	// matchList
	["%","percent","percentage"],
	// type
	AlarmUnitType,
	// base
	null,
		// fromBase converts % to %
	function fromBase (p: scalar): scalar {
	    return p
	},
		// toBase converts % to %
	function toBase (p: scalar): scalar {
	    return p
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

AlarmUnitType.base = PercentAlarmUnit
AlarmUnitType.units = [PercentAlarmUnit]

// Work (UnitType)
// Contains 4 units:
//  - JoulesWork                 J => J                         = J
//  - InchPoundsForceWork        J => J * 8.850,74              = in lbf
//  - CubicFeetOfNaturalGasWork  J => J * 0.000,000,947,817     = BTUᵢₜ
//  - BarrelsOfOilEquivalentWork J => J * 0.000,000,000,163,399 = bboe
// Base: JoulesWork

export const WorkUnitType = new UnitType(
	// title
	'Work',
	// name
	'Work',
	// unitList
	["Joules","Inch-pounds Force","Cubic Feet of Natural Gas","Barrels of Oil Equivalent"],
	// matchList
	["work"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// JoulesWork (Unit)
// UnitType     : Work
// UnitType.Base: JoulesWork
// Unit.FromBase: J => J = J
// Unit.ToBase  : J => J = J

export const JoulesWorkUnit = new Unit(
	// title
	'Joules',
	// name
	'Joules',
	// symbol
	'J',
	// matchList
	["j","joule","joules"],
	// type
	WorkUnitType,
	// base
	null,
		// fromBase converts J to J
	function fromBase (J: scalar): scalar {
	    return J
	},
		// toBase converts J to J
	function toBase (J: scalar): scalar {
	    return J
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// InchPoundsForceWork (Unit)
// UnitType     : Work
// UnitType.Base: JoulesWork
// Unit.FromBase: J => J * 8.850,74          = in lbf
// Unit.ToBase  : inlbf => inlbf * 0.112,985 = J

export const InchPoundsForceWorkUnit = new Unit(
	// title
	'InchPoundsForce',
	// name
	'Inch-pounds Force',
	// symbol
	'in lbf',
	// matchList
	["inlbf","inch-poundsforce","inch-poundforce","in-lbf"],
	// type
	WorkUnitType,
	// base
	JoulesWorkUnit,
		// fromBase converts J to in lbf
	function fromBase (J: scalar): scalar {
	    return J * 8.85074
	},
		// toBase converts in lbf to J
	function toBase (inlbf: scalar): scalar {
	    return inlbf * 0.112985
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// CubicFeetOfNaturalGasWork (Unit)
// UnitType     : Work
// UnitType.Base: JoulesWork
// Unit.FromBase: J => J * 0.000,000,947,817 = BTUᵢₜ
// Unit.ToBase  : btu => btu * 1,055,060     = J

export const CubicFeetOfNaturalGasWorkUnit = new Unit(
	// title
	'CubicFeetOfNaturalGas',
	// name
	'Cubic Feet of Natural Gas',
	// symbol
	'BTUᵢₜ',
	// matchList
	["btuᵢₜ","btuit","btu","cubicfeetofnaturalgas"],
	// type
	WorkUnitType,
	// base
	JoulesWorkUnit,
		// fromBase converts J to BTUᵢₜ
	function fromBase (J: scalar): scalar {
	    return J * 0.000000947817
	},
		// toBase converts BTUᵢₜ to J
	function toBase (btu: scalar): scalar {
	    return btu * 1055060
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// BarrelsOfOilEquivalentWork (Unit)
// UnitType     : Work
// UnitType.Base: JoulesWork
// Unit.FromBase: J => J * 0.000,000,000,163,399 = bboe
// Unit.ToBase  : bboe => bboe * 6,120,000,000   = J

export const BarrelsOfOilEquivalentWorkUnit = new Unit(
	// title
	'BarrelsOfOilEquivalent',
	// name
	'Barrels of Oil Equivalent',
	// symbol
	'bboe',
	// matchList
	["bboe","barrelsofoilequivalent"],
	// type
	WorkUnitType,
	// base
	JoulesWorkUnit,
		// fromBase converts J to bboe
	function fromBase (J: scalar): scalar {
	    return J * 0.000000000163399
	},
		// toBase converts bboe to J
	function toBase (bboe: scalar): scalar {
	    return bboe * 6120000000
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

WorkUnitType.base = JoulesWorkUnit
WorkUnitType.units = [JoulesWorkUnit,InchPoundsForceWorkUnit,CubicFeetOfNaturalGasWorkUnit,BarrelsOfOilEquivalentWorkUnit]

// Force (UnitType)
// Contains 3 units:
//  - NewtonsForce        N => N             = N
//  - PoundsForceForce    N => N * 0.224,809 = lbf
//  - KilogramsForceForce N => N * 0.101,972 = kgf
// Base: NewtonsForce

export const ForceUnitType = new UnitType(
	// title
	'Force',
	// name
	'Force',
	// unitList
	["Newtons","Pounds-force","Kilograms-force"],
	// matchList
	["force"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// NewtonsForce (Unit)
// UnitType     : Force
// UnitType.Base: NewtonsForce
// Unit.FromBase: N => N = N
// Unit.ToBase  : N => N = N

export const NewtonsForceUnit = new Unit(
	// title
	'Newtons',
	// name
	'Newtons',
	// symbol
	'N',
	// matchList
	["n","newton","newtons"],
	// type
	ForceUnitType,
	// base
	null,
		// fromBase converts N to N
	function fromBase (N: scalar): scalar {
	    return N
	},
		// toBase converts N to N
	function toBase (N: scalar): scalar {
	    return N
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// PoundsForceForce (Unit)
// UnitType     : Force
// UnitType.Base: NewtonsForce
// Unit.FromBase: N => N * 0.224,809    = lbf
// Unit.ToBase  : lbf => lbf * 4.448,22 = N

export const PoundsForceForceUnit = new Unit(
	// title
	'PoundsForce',
	// name
	'Pounds-force',
	// symbol
	'lbf',
	// matchList
	["lbf","pounds-force","poundsforce","pound-force","poundforce"],
	// type
	ForceUnitType,
	// base
	NewtonsForceUnit,
		// fromBase converts N to lbf
	function fromBase (N: scalar): scalar {
	    return N * 0.224809
	},
		// toBase converts lbf to N
	function toBase (lbf: scalar): scalar {
	    return lbf * 4.44822
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// KilogramsForceForce (Unit)
// UnitType     : Force
// UnitType.Base: NewtonsForce
// Unit.FromBase: N => N * 0.101,972    = kgf
// Unit.ToBase  : kgf => kgf * 9.806,65 = N

export const KilogramsForceForceUnit = new Unit(
	// title
	'KilogramsForce',
	// name
	'Kilograms-force',
	// symbol
	'kgf',
	// matchList
	["kgf","kilograms-force","kilogram-force"],
	// type
	ForceUnitType,
	// base
	NewtonsForceUnit,
		// fromBase converts N to kgf
	function fromBase (N: scalar): scalar {
	    return N * 0.101972
	},
		// toBase converts kgf to N
	function toBase (kgf: scalar): scalar {
	    return kgf * 9.80665
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

ForceUnitType.base = NewtonsForceUnit
ForceUnitType.units = [NewtonsForceUnit,PoundsForceForceUnit,KilogramsForceForceUnit]

// Load (UnitType)
// Contains 3 units:
//  - NewtonsLoad        N => N             = N
//  - PoundsForceLoad    N => N * 0.224,809 = lbf
//  - KilogramsForceLoad N => N * 0.101,972 = kgf
// Base: NewtonsLoad

export const LoadUnitType = new UnitType(
	// title
	'Load',
	// name
	'Load',
	// unitList
	["Newtons","Pounds-force","Kilograms-force"],
	// matchList
	["load"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// NewtonsLoad (Unit)
// UnitType     : Load
// UnitType.Base: NewtonsLoad
// Unit.FromBase: N => N = N
// Unit.ToBase  : N => N = N

export const NewtonsLoadUnit = new Unit(
	// title
	'Newtons',
	// name
	'Newtons',
	// symbol
	'N',
	// matchList
	["n","newton","newtons"],
	// type
	LoadUnitType,
	// base
	null,
		// fromBase converts N to N
	function fromBase (N: scalar): scalar {
	    return N
	},
		// toBase converts N to N
	function toBase (N: scalar): scalar {
	    return N
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// PoundsForceLoad (Unit)
// UnitType     : Load
// UnitType.Base: NewtonsLoad
// Unit.FromBase: N => N * 0.224,809    = lbf
// Unit.ToBase  : lbf => lbf * 4.448,22 = N

export const PoundsForceLoadUnit = new Unit(
	// title
	'PoundsForce',
	// name
	'Pounds-force',
	// symbol
	'lbf',
	// matchList
	["lbf","pounds-force","poundsforce","pound-force","poundforce"],
	// type
	LoadUnitType,
	// base
	NewtonsLoadUnit,
		// fromBase converts N to lbf
	function fromBase (N: scalar): scalar {
	    return N * 0.224809
	},
		// toBase converts lbf to N
	function toBase (lbf: scalar): scalar {
	    return lbf * 4.44822
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// KilogramsForceLoad (Unit)
// UnitType     : Load
// UnitType.Base: NewtonsLoad
// Unit.FromBase: N => N * 0.101,972    = kgf
// Unit.ToBase  : kgf => kgf * 9.806,65 = N

export const KilogramsForceLoadUnit = new Unit(
	// title
	'KilogramsForce',
	// name
	'Kilograms-force',
	// symbol
	'kgf',
	// matchList
	["kgf","kilograms-force","kilogram-force"],
	// type
	LoadUnitType,
	// base
	NewtonsLoadUnit,
		// fromBase converts N to kgf
	function fromBase (N: scalar): scalar {
	    return N * 0.101972
	},
		// toBase converts kgf to N
	function toBase (kgf: scalar): scalar {
	    return kgf * 9.80665
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

LoadUnitType.base = NewtonsLoadUnit
LoadUnitType.units = [NewtonsLoadUnit,PoundsForceLoadUnit,KilogramsForceLoadUnit]

// MaxLoad (UnitType)
// Contains 3 units:
//  - NewtonsMaxLoad        N => N             = N
//  - PoundsForceMaxLoad    N => N * 0.224,809 = lbf
//  - KilogramsForceMaxLoad N => N * 0.101,972 = kgf
// Base: NewtonsMaxLoad

export const MaxLoadUnitType = new UnitType(
	// title
	'MaxLoad',
	// name
	'Max Load',
	// unitList
	["Newtons","Pounds-force","Kilograms-force"],
	// matchList
	["maxload"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// NewtonsMaxLoad (Unit)
// UnitType     : MaxLoad
// UnitType.Base: NewtonsMaxLoad
// Unit.FromBase: N => N = N
// Unit.ToBase  : N => N = N

export const NewtonsMaxLoadUnit = new Unit(
	// title
	'Newtons',
	// name
	'Newtons',
	// symbol
	'N',
	// matchList
	["n","newton","newtons"],
	// type
	MaxLoadUnitType,
	// base
	null,
		// fromBase converts N to N
	function fromBase (N: scalar): scalar {
	    return N
	},
		// toBase converts N to N
	function toBase (N: scalar): scalar {
	    return N
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// PoundsForceMaxLoad (Unit)
// UnitType     : MaxLoad
// UnitType.Base: NewtonsMaxLoad
// Unit.FromBase: N => N * 0.224,809    = lbf
// Unit.ToBase  : lbf => lbf * 4.448,22 = N

export const PoundsForceMaxLoadUnit = new Unit(
	// title
	'PoundsForce',
	// name
	'Pounds-force',
	// symbol
	'lbf',
	// matchList
	["lbf","pounds-force","poundsforce","pound-force","poundforce"],
	// type
	MaxLoadUnitType,
	// base
	NewtonsMaxLoadUnit,
		// fromBase converts N to lbf
	function fromBase (N: scalar): scalar {
	    return N * 0.224809
	},
		// toBase converts lbf to N
	function toBase (lbf: scalar): scalar {
	    return lbf * 4.44822
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// KilogramsForceMaxLoad (Unit)
// UnitType     : MaxLoad
// UnitType.Base: NewtonsMaxLoad
// Unit.FromBase: N => N * 0.101,972    = kgf
// Unit.ToBase  : kgf => kgf * 9.806,65 = N

export const KilogramsForceMaxLoadUnit = new Unit(
	// title
	'KilogramsForce',
	// name
	'Kilograms-force',
	// symbol
	'kgf',
	// matchList
	["kgf","kilograms-force","kilogram-force"],
	// type
	MaxLoadUnitType,
	// base
	NewtonsMaxLoadUnit,
		// fromBase converts N to kgf
	function fromBase (N: scalar): scalar {
	    return N * 0.101972
	},
		// toBase converts kgf to N
	function toBase (kgf: scalar): scalar {
	    return kgf * 9.80665
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

MaxLoadUnitType.base = NewtonsMaxLoadUnit
MaxLoadUnitType.units = [NewtonsMaxLoadUnit,PoundsForceMaxLoadUnit,KilogramsForceMaxLoadUnit]

// MinLoad (UnitType)
// Contains 3 units:
//  - NewtonsMinLoad        N => N             = N
//  - PoundsForceMinLoad    N => N * 0.224,809 = lbf
//  - KilogramsForceMinLoad N => N * 0.101,972 = kgf
// Base: NewtonsMinLoad

export const MinLoadUnitType = new UnitType(
	// title
	'MinLoad',
	// name
	'Min Load',
	// unitList
	["Newtons","Pounds-force","Kilograms-force"],
	// matchList
	["minload"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// NewtonsMinLoad (Unit)
// UnitType     : MinLoad
// UnitType.Base: NewtonsMinLoad
// Unit.FromBase: N => N = N
// Unit.ToBase  : N => N = N

export const NewtonsMinLoadUnit = new Unit(
	// title
	'Newtons',
	// name
	'Newtons',
	// symbol
	'N',
	// matchList
	["n","newton","newtons"],
	// type
	MinLoadUnitType,
	// base
	null,
		// fromBase converts N to N
	function fromBase (N: scalar): scalar {
	    return N
	},
		// toBase converts N to N
	function toBase (N: scalar): scalar {
	    return N
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// PoundsForceMinLoad (Unit)
// UnitType     : MinLoad
// UnitType.Base: NewtonsMinLoad
// Unit.FromBase: N => N * 0.224,809    = lbf
// Unit.ToBase  : lbf => lbf * 4.448,22 = N

export const PoundsForceMinLoadUnit = new Unit(
	// title
	'PoundsForce',
	// name
	'Pounds-force',
	// symbol
	'lbf',
	// matchList
	["lbf","pounds-force","poundsforce","pound-force","poundforce"],
	// type
	MinLoadUnitType,
	// base
	NewtonsMinLoadUnit,
		// fromBase converts N to lbf
	function fromBase (N: scalar): scalar {
	    return N * 0.224809
	},
		// toBase converts lbf to N
	function toBase (lbf: scalar): scalar {
	    return lbf * 4.44822
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// KilogramsForceMinLoad (Unit)
// UnitType     : MinLoad
// UnitType.Base: NewtonsMinLoad
// Unit.FromBase: N => N * 0.101,972    = kgf
// Unit.ToBase  : kgf => kgf * 9.806,65 = N

export const KilogramsForceMinLoadUnit = new Unit(
	// title
	'KilogramsForce',
	// name
	'Kilograms-force',
	// symbol
	'kgf',
	// matchList
	["kgf","kilograms-force","kilogram-force"],
	// type
	MinLoadUnitType,
	// base
	NewtonsMinLoadUnit,
		// fromBase converts N to kgf
	function fromBase (N: scalar): scalar {
	    return N * 0.101972
	},
		// toBase converts kgf to N
	function toBase (kgf: scalar): scalar {
	    return kgf * 9.80665
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

MinLoadUnitType.base = NewtonsMinLoadUnit
MinLoadUnitType.units = [NewtonsMinLoadUnit,PoundsForceMinLoadUnit,KilogramsForceMinLoadUnit]

// FluidLoad (UnitType)
// Contains 3 units:
//  - NewtonsFluidLoad        N => N             = N
//  - PoundsForceFluidLoad    N => N * 0.224,809 = lbf
//  - KilogramsForceFluidLoad N => N * 0.101,972 = kgf
// Base: NewtonsFluidLoad

export const FluidLoadUnitType = new UnitType(
	// title
	'FluidLoad',
	// name
	'Fluid Load',
	// unitList
	["Newtons","Pounds-force","Kilograms-force"],
	// matchList
	["fluidload"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// NewtonsFluidLoad (Unit)
// UnitType     : FluidLoad
// UnitType.Base: NewtonsFluidLoad
// Unit.FromBase: N => N = N
// Unit.ToBase  : N => N = N

export const NewtonsFluidLoadUnit = new Unit(
	// title
	'Newtons',
	// name
	'Newtons',
	// symbol
	'N',
	// matchList
	["n","newton","newtons"],
	// type
	FluidLoadUnitType,
	// base
	null,
		// fromBase converts N to N
	function fromBase (N: scalar): scalar {
	    return N
	},
		// toBase converts N to N
	function toBase (N: scalar): scalar {
	    return N
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// PoundsForceFluidLoad (Unit)
// UnitType     : FluidLoad
// UnitType.Base: NewtonsFluidLoad
// Unit.FromBase: N => N * 0.224,809    = lbf
// Unit.ToBase  : lbf => lbf * 4.448,22 = N

export const PoundsForceFluidLoadUnit = new Unit(
	// title
	'PoundsForce',
	// name
	'Pounds-force',
	// symbol
	'lbf',
	// matchList
	["lbf","pounds-force","poundsforce","pound-force","poundforce"],
	// type
	FluidLoadUnitType,
	// base
	NewtonsFluidLoadUnit,
		// fromBase converts N to lbf
	function fromBase (N: scalar): scalar {
	    return N * 0.224809
	},
		// toBase converts lbf to N
	function toBase (lbf: scalar): scalar {
	    return lbf * 4.44822
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// KilogramsForceFluidLoad (Unit)
// UnitType     : FluidLoad
// UnitType.Base: NewtonsFluidLoad
// Unit.FromBase: N => N * 0.101,972    = kgf
// Unit.ToBase  : kgf => kgf * 9.806,65 = N

export const KilogramsForceFluidLoadUnit = new Unit(
	// title
	'KilogramsForce',
	// name
	'Kilograms-force',
	// symbol
	'kgf',
	// matchList
	["kgf","kilograms-force","kilogram-force"],
	// type
	FluidLoadUnitType,
	// base
	NewtonsFluidLoadUnit,
		// fromBase converts N to kgf
	function fromBase (N: scalar): scalar {
	    return N * 0.101972
	},
		// toBase converts kgf to N
	function toBase (kgf: scalar): scalar {
	    return kgf * 9.80665
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

FluidLoadUnitType.base = NewtonsFluidLoadUnit
FluidLoadUnitType.units = [NewtonsFluidLoadUnit,PoundsForceFluidLoadUnit,KilogramsForceFluidLoadUnit]

// Length (UnitType)
// Contains 3 units:
//  - MetersLength m => m            = m
//  - FeetLength   m => m * 3.280,84 = ft
//  - InchesLength m => m * 39.370,1 = in
// Base: MetersLength

export const LengthUnitType = new UnitType(
	// title
	'Length',
	// name
	'Length',
	// unitList
	["Meters","Feet","Inches"],
	// matchList
	["l","length"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// MetersLength (Unit)
// UnitType     : Length
// UnitType.Base: MetersLength
// Unit.FromBase: m => m = m
// Unit.ToBase  : m => m = m

export const MetersLengthUnit = new Unit(
	// title
	'Meters',
	// name
	'Meters',
	// symbol
	'm',
	// matchList
	["m","meter","meters"],
	// type
	LengthUnitType,
	// base
	null,
		// fromBase converts m to m
	function fromBase (m: scalar): scalar {
	    return m
	},
		// toBase converts m to m
	function toBase (m: scalar): scalar {
	    return m
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// FeetLength (Unit)
// UnitType     : Length
// UnitType.Base: MetersLength
// Unit.FromBase: m => m * 3.280,84    = ft
// Unit.ToBase  : ft => ft * 0.304,800 = m

export const FeetLengthUnit = new Unit(
	// title
	'Feet',
	// name
	'Feet',
	// symbol
	'ft',
	// matchList
	["ft","foot","feet"],
	// type
	LengthUnitType,
	// base
	MetersLengthUnit,
		// fromBase converts m to ft
	function fromBase (m: scalar): scalar {
	    return m * 3.28084
	},
		// toBase converts ft to m
	function toBase (ft: scalar): scalar {
	    return ft * 0.304800
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// InchesLength (Unit)
// UnitType     : Length
// UnitType.Base: MetersLength
// Unit.FromBase: m => m * 39.370,1     = in
// Unit.ToBase  : in => in * 0.0254,000 = m

export const InchesLengthUnit = new Unit(
	// title
	'Inches',
	// name
	'Inches',
	// symbol
	'in',
	// matchList
	["in","inch","inches"],
	// type
	LengthUnitType,
	// base
	MetersLengthUnit,
		// fromBase converts m to in
	function fromBase (m: scalar): scalar {
	    return m * 39.3701
	},
		// toBase converts in to m
	function toBase (inch: scalar): scalar {
	    return inch
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

LengthUnitType.base = MetersLengthUnit
LengthUnitType.units = [MetersLengthUnit,FeetLengthUnit,InchesLengthUnit]

// Stroke (UnitType)
// Contains 3 units:
//  - MetersStroke m => m            = m
//  - FeetStroke   m => m * 3.280,84 = ft
//  - InchesStroke m => m * 39.370,1 = in
// Base: MetersStroke

export const StrokeUnitType = new UnitType(
	// title
	'Stroke',
	// name
	'Stroke',
	// unitList
	["Meters","Feet","Inches"],
	// matchList
	["stroke"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// MetersStroke (Unit)
// UnitType     : Stroke
// UnitType.Base: MetersStroke
// Unit.FromBase: m => m = m
// Unit.ToBase  : m => m = m

export const MetersStrokeUnit = new Unit(
	// title
	'Meters',
	// name
	'Meters',
	// symbol
	'm',
	// matchList
	["m","meter","meters"],
	// type
	StrokeUnitType,
	// base
	null,
		// fromBase converts m to m
	function fromBase (m: scalar): scalar {
	    return m
	},
		// toBase converts m to m
	function toBase (m: scalar): scalar {
	    return m
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// FeetStroke (Unit)
// UnitType     : Stroke
// UnitType.Base: MetersStroke
// Unit.FromBase: m => m * 3.280,84    = ft
// Unit.ToBase  : ft => ft * 0.304,800 = m

export const FeetStrokeUnit = new Unit(
	// title
	'Feet',
	// name
	'Feet',
	// symbol
	'ft',
	// matchList
	["ft","foot","feet"],
	// type
	StrokeUnitType,
	// base
	MetersStrokeUnit,
		// fromBase converts m to ft
	function fromBase (m: scalar): scalar {
	    return m * 3.28084
	},
		// toBase converts ft to m
	function toBase (ft: scalar): scalar {
	    return ft * 0.304800
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// InchesStroke (Unit)
// UnitType     : Stroke
// UnitType.Base: MetersStroke
// Unit.FromBase: m => m * 39.370,1     = in
// Unit.ToBase  : in => in * 0.0254,000 = m

export const InchesStrokeUnit = new Unit(
	// title
	'Inches',
	// name
	'Inches',
	// symbol
	'in',
	// matchList
	["in","inch","inches"],
	// type
	StrokeUnitType,
	// base
	MetersStrokeUnit,
		// fromBase converts m to in
	function fromBase (m: scalar): scalar {
	    return m * 39.3701
	},
		// toBase converts in to m
	function toBase (inch: scalar): scalar {
	    return inch
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

StrokeUnitType.base = MetersStrokeUnit
StrokeUnitType.units = [MetersStrokeUnit,FeetStrokeUnit,InchesStrokeUnit]

// GrossStroke (UnitType)
// Contains 3 units:
//  - MetersGrossStroke m => m            = m
//  - FeetGrossStroke   m => m * 3.280,84 = ft
//  - InchesGrossStroke m => m * 39.370,1 = in
// Base: MetersGrossStroke

export const GrossStrokeUnitType = new UnitType(
	// title
	'GrossStroke',
	// name
	'Gross Stroke',
	// unitList
	["Meters","Feet","Inches"],
	// matchList
	["grossstroke"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// MetersGrossStroke (Unit)
// UnitType     : GrossStroke
// UnitType.Base: MetersGrossStroke
// Unit.FromBase: m => m = m
// Unit.ToBase  : m => m = m

export const MetersGrossStrokeUnit = new Unit(
	// title
	'Meters',
	// name
	'Meters',
	// symbol
	'm',
	// matchList
	["m","meter","meters"],
	// type
	GrossStrokeUnitType,
	// base
	null,
		// fromBase converts m to m
	function fromBase (m: scalar): scalar {
	    return m
	},
		// toBase converts m to m
	function toBase (m: scalar): scalar {
	    return m
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// FeetGrossStroke (Unit)
// UnitType     : GrossStroke
// UnitType.Base: MetersGrossStroke
// Unit.FromBase: m => m * 3.280,84    = ft
// Unit.ToBase  : ft => ft * 0.304,800 = m

export const FeetGrossStrokeUnit = new Unit(
	// title
	'Feet',
	// name
	'Feet',
	// symbol
	'ft',
	// matchList
	["ft","foot","feet"],
	// type
	GrossStrokeUnitType,
	// base
	MetersGrossStrokeUnit,
		// fromBase converts m to ft
	function fromBase (m: scalar): scalar {
	    return m * 3.28084
	},
		// toBase converts ft to m
	function toBase (ft: scalar): scalar {
	    return ft * 0.304800
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// InchesGrossStroke (Unit)
// UnitType     : GrossStroke
// UnitType.Base: MetersGrossStroke
// Unit.FromBase: m => m * 39.370,1     = in
// Unit.ToBase  : in => in * 0.0254,000 = m

export const InchesGrossStrokeUnit = new Unit(
	// title
	'Inches',
	// name
	'Inches',
	// symbol
	'in',
	// matchList
	["in","inch","inches"],
	// type
	GrossStrokeUnitType,
	// base
	MetersGrossStrokeUnit,
		// fromBase converts m to in
	function fromBase (m: scalar): scalar {
	    return m * 39.3701
	},
		// toBase converts in to m
	function toBase (inch: scalar): scalar {
	    return inch
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

GrossStrokeUnitType.base = MetersGrossStrokeUnit
GrossStrokeUnitType.units = [MetersGrossStrokeUnit,FeetGrossStrokeUnit,InchesGrossStrokeUnit]

// NetStroke (UnitType)
// Contains 3 units:
//  - MetersNetStroke m => m            = m
//  - FeetNetStroke   m => m * 3.280,84 = ft
//  - InchesNetStroke m => m * 39.370,1 = in
// Base: MetersNetStroke

export const NetStrokeUnitType = new UnitType(
	// title
	'NetStroke',
	// name
	'Net Stroke',
	// unitList
	["Meters","Feet","Inches"],
	// matchList
	["netstroke"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// MetersNetStroke (Unit)
// UnitType     : NetStroke
// UnitType.Base: MetersNetStroke
// Unit.FromBase: m => m = m
// Unit.ToBase  : m => m = m

export const MetersNetStrokeUnit = new Unit(
	// title
	'Meters',
	// name
	'Meters',
	// symbol
	'm',
	// matchList
	["m","meter","meters"],
	// type
	NetStrokeUnitType,
	// base
	null,
		// fromBase converts m to m
	function fromBase (m: scalar): scalar {
	    return m
	},
		// toBase converts m to m
	function toBase (m: scalar): scalar {
	    return m
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// FeetNetStroke (Unit)
// UnitType     : NetStroke
// UnitType.Base: MetersNetStroke
// Unit.FromBase: m => m * 3.280,84    = ft
// Unit.ToBase  : ft => ft * 0.304,800 = m

export const FeetNetStrokeUnit = new Unit(
	// title
	'Feet',
	// name
	'Feet',
	// symbol
	'ft',
	// matchList
	["ft","foot","feet"],
	// type
	NetStrokeUnitType,
	// base
	MetersNetStrokeUnit,
		// fromBase converts m to ft
	function fromBase (m: scalar): scalar {
	    return m * 3.28084
	},
		// toBase converts ft to m
	function toBase (ft: scalar): scalar {
	    return ft * 0.304800
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// InchesNetStroke (Unit)
// UnitType     : NetStroke
// UnitType.Base: MetersNetStroke
// Unit.FromBase: m => m * 39.370,1     = in
// Unit.ToBase  : in => in * 0.0254,000 = m

export const InchesNetStrokeUnit = new Unit(
	// title
	'Inches',
	// name
	'Inches',
	// symbol
	'in',
	// matchList
	["in","inch","inches"],
	// type
	NetStrokeUnitType,
	// base
	MetersNetStrokeUnit,
		// fromBase converts m to in
	function fromBase (m: scalar): scalar {
	    return m * 39.3701
	},
		// toBase converts in to m
	function toBase (inch: scalar): scalar {
	    return inch
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

NetStrokeUnitType.base = MetersNetStrokeUnit
NetStrokeUnitType.units = [MetersNetStrokeUnit,FeetNetStrokeUnit,InchesNetStrokeUnit]

// StrokeRate (UnitType)
// Contains 1 units:
//  - StrokesPerSecondStrokeRate ss => ss = strokes/s
// Base: StrokesPerSecondStrokeRate

export const StrokeRateUnitType = new UnitType(
	// title
	'StrokeRate',
	// name
	'Stroke Rate',
	// unitList
	["Strokes per Second"],
	// matchList
	["strokerate","stroke-rate"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// StrokesPerSecondStrokeRate (Unit)
// UnitType     : StrokeRate
// UnitType.Base: StrokesPerSecondStrokeRate
// Unit.FromBase: ss => ss = strokes/s
// Unit.ToBase  : ss => ss = strokes/s

export const StrokesPerSecondStrokeRateUnit = new Unit(
	// title
	'StrokesPerSecond',
	// name
	'Strokes per Second',
	// symbol
	'strokes/s',
	// matchList
	["strokes/s","strokespersecond","s/s"],
	// type
	StrokeRateUnitType,
	// base
	null,
		// fromBase converts strokes/s to strokes/s
	function fromBase (ss: scalar): scalar {
	    return ss
	},
		// toBase converts strokes/s to strokes/s
	function toBase (ss: scalar): scalar {
	    return ss
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

StrokeRateUnitType.base = StrokesPerSecondStrokeRateUnit
StrokeRateUnitType.units = [StrokesPerSecondStrokeRateUnit]

// Number (UnitType)
// Contains 1 units:
//  - NumberNumber n => n = 
// Base: NumberNumber

export const NumberUnitType = new UnitType(
	// title
	'Number',
	// name
	'Number',
	// unitList
	["Number"],
	// matchList
	["*"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// NumberNumber (Unit)
// UnitType     : Number
// UnitType.Base: NumberNumber
// Unit.FromBase: n => n = 
// Unit.ToBase  : n => n = 

export const NumberNumberUnit = new Unit(
	// title
	'Number',
	// name
	'Number',
	// symbol
	'',
	// matchList
	["number","*"],
	// type
	NumberUnitType,
	// base
	null,
		// fromBase converts  to 
	function fromBase (n: scalar): scalar {
	    return n
	},
		// toBase converts  to 
	function toBase (n: scalar): scalar {
	    return n
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

NumberUnitType.base = NumberNumberUnit
NumberUnitType.units = [NumberNumberUnit]

// Overspeed (UnitType)
// Contains 1 units:
//  - NumberOverspeed n => n = 
// Base: NumberOverspeed

export const OverspeedUnitType = new UnitType(
	// title
	'Overspeed',
	// name
	'Overspeed',
	// unitList
	["Number"],
	// matchList
	["overspeed"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// NumberOverspeed (Unit)
// UnitType     : Overspeed
// UnitType.Base: NumberOverspeed
// Unit.FromBase: n => n = 
// Unit.ToBase  : n => n = 

export const NumberOverspeedUnit = new Unit(
	// title
	'Number',
	// name
	'Number',
	// symbol
	'',
	// matchList
	["number","*"],
	// type
	OverspeedUnitType,
	// base
	null,
		// fromBase converts  to 
	function fromBase (n: scalar): scalar {
	    return n
	},
		// toBase converts  to 
	function toBase (n: scalar): scalar {
	    return n
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

OverspeedUnitType.base = NumberOverspeedUnit
OverspeedUnitType.units = [NumberOverspeedUnit]

// Underspeed (UnitType)
// Contains 1 units:
//  - NumberUnderspeed n => n = 
// Base: NumberUnderspeed

export const UnderspeedUnitType = new UnitType(
	// title
	'Underspeed',
	// name
	'Underspeed',
	// unitList
	["Number"],
	// matchList
	["underspeed"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// NumberUnderspeed (Unit)
// UnitType     : Underspeed
// UnitType.Base: NumberUnderspeed
// Unit.FromBase: n => n = 
// Unit.ToBase  : n => n = 

export const NumberUnderspeedUnit = new Unit(
	// title
	'Number',
	// name
	'Number',
	// symbol
	'',
	// matchList
	["number","*"],
	// type
	UnderspeedUnitType,
	// base
	null,
		// fromBase converts  to 
	function fromBase (n: scalar): scalar {
	    return n
	},
		// toBase converts  to 
	function toBase (n: scalar): scalar {
	    return n
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

UnderspeedUnitType.base = NumberUnderspeedUnit
UnderspeedUnitType.units = [NumberUnderspeedUnit]

// Totaliser (UnitType)
// Contains 1 units:
//  - NumberTotaliser n => n = 
// Base: NumberTotaliser

export const TotaliserUnitType = new UnitType(
	// title
	'Totaliser',
	// name
	'Totaliser',
	// unitList
	["Number"],
	// matchList
	["totaliser"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// NumberTotaliser (Unit)
// UnitType     : Totaliser
// UnitType.Base: NumberTotaliser
// Unit.FromBase: n => n = 
// Unit.ToBase  : n => n = 

export const NumberTotaliserUnit = new Unit(
	// title
	'Number',
	// name
	'Number',
	// symbol
	'',
	// matchList
	["number","*"],
	// type
	TotaliserUnitType,
	// base
	null,
		// fromBase converts  to 
	function fromBase (n: scalar): scalar {
	    return n
	},
		// toBase converts  to 
	function toBase (n: scalar): scalar {
	    return n
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

TotaliserUnitType.base = NumberTotaliserUnit
TotaliserUnitType.units = [NumberTotaliserUnit]

// WMLFlowRate (UnitType)
// Contains 1 units:
//  - NumberWMLFlowRate n => n = 
// Base: NumberWMLFlowRate

export const WMLFlowRateUnitType = new UnitType(
	// title
	'WMLFlowRate',
	// name
	'WML Flow Rate',
	// unitList
	["Number"],
	// matchList
	["wmlflowrate"],
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: UnitType, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

// NumberWMLFlowRate (Unit)
// UnitType     : WMLFlowRate
// UnitType.Base: NumberWMLFlowRate
// Unit.FromBase: n => n = 
// Unit.ToBase  : n => n = 

export const NumberWMLFlowRateUnit = new Unit(
	// title
	'Number',
	// name
	'Number',
	// symbol
	'',
	// matchList
	["number","*"],
	// type
	WMLFlowRateUnitType,
	// base
	null,
		// fromBase converts  to 
	function fromBase (n: scalar): scalar {
	    return n
	},
		// toBase converts  to 
	function toBase (n: scalar): scalar {
	    return n
	},
		// matcher returns true if check matches our possible names.
	// Helpful when a user is allowed to enter in unit types
	// freehand, for example.
	function matcher (this: Unit, check: string): boolean {
	    check = sanitizeString(check)
	    for (const m of this.matchList) {
	    	if (m === check || m === '*') return true
	    }
	    return false
	}
)

WMLFlowRateUnitType.base = NumberWMLFlowRateUnit
WMLFlowRateUnitType.units = [NumberWMLFlowRateUnit]